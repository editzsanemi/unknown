i wanna add 5 languages in my imgui menu so we have to use these:
bool Setting::LanguageVNM = true;
bool Setting::LanguageRUSSIAN = false;
bool Setting::LanguageARABIC = false;
bool Setting::LanguageTURKISH = false;
bool Setting::LanguageCHINESE = false;
bool Setting::LanguageENGLISH = false;
also VNM = Vietnamese
i want to add a combo box in this login menu that we choose languages from i wanna put it in the login menu so we can choose language before we login to the main menu
The Login Menu:

VOID LoginMenu() {
    if (IsFirstReadKey == true) {
        string key;
        ifstream file("C:\\HELIOS_key.lic");
        if (file.is_open()) {
            std::getline(file, key);
            file.close();
            strcpy(Keyinput, key.c_str());
        }
        IsFirstReadKey = false;
    }
    if (IsLoginCenter == false) {
        ImGuiIO& io = ImGui::GetIO();
        ImGui::SetNextWindowPos(ImVec2(io.DisplaySize.x * 0.5f, io.DisplaySize.y * 0.5f), ImGuiCond_Always, ImVec2(0.5f, 0.5f));
        IsLoginCenter = true;
    }
    ImGui::SetNextWindowSize(ImVec2(415, 0));
    string ActiveHackText = (Setting::LanguageVNM == true) ? (u8"Kích hoạt hack") : ("Active hack");
    ImGui::PushStyleVar(ImGuiStyleVar_WindowTitleAlign, ImVec2(0.5f, 0.5f));
    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 8);
    ImGui::Begin(ActiveHackText.c_str(), &IsOpenLogin, Flags);
    if (IsPress) {
        if (Status == u8"Đăng nhập thành công. Vui lòng đợi khởi động hack ...") {
            ImGui::TextColored(ImColor(0, 255, 0, 170), Status.c_str());
        }
        else if (Status == u8"Key không tồn tại." || Status == u8"Key này đang bị khóa. Vui lòng liên hệ đội ngũ hỗ trợ." || Status == u8"Key đã hết hạn sử dụng." || Status == u8"Key đã được sử dụng trên thiết bị khác. Hãy đặt lại HWID." || Status == u8"Lỗi kết nối không xác định (1207)." || Status == u8"Key chưa được kích hoạt. Vui lòng bấm vào nút Active Key.") {
            ImGui::TextColored(ImColor(255, 0, 0, 255), Status.c_str());
        }
        else {
            ImGui::Text(Status.c_str());
        }

        /* if (OutputApi.find("KEY_INVALID") != std::string::npos) {
            Status = u8"Key không tồn tại.";
        } else if (OutputApi.find("KEY_DOES_NOT_ACTIVE") != std::string::npos) {
            Status = u8"Key chưa được kích hoạt. Vui lòng bấm vào nút Active Key.";
        } else if (OutputApi.find("KEY_HAS_BANNED") != std::string::npos) {
            Status = u8"Key này đang bị khóa. Vui lòng liên hệ đội ngũ hỗ trợ.";
        } else if (OutputApi.find("KEY_HAS_EXPIRED") != std::string::npos) {
            Status = u8"Key đã hết hạn sử dụng.";
        } else if (OutputApi.find("KEY_BEING_USED") != std::string::npos) {
            Status = u8"Key đã được sử dụng trên thiết bị khác. Hãy đặt lại HWID.";
        } else {
            Status = u8"Lỗi kết nối không xác định (1207).";
        }*/

    }
    ImGui::Text("Key: ");
    ImGui::SameLine();
    HelpMarker((Setting::LanguageVNM == true) ? (u8"Gõ key VIP mà bạn có vào đây hoặc kích hoạt key tại website.") : ("Type your VIP key here or active key on our website."));
    ImGui::SameLine();
    ImGui::PushItemWidth(-1);
    ImGui::InputText("", Keyinput, ARRAYSIZE(Keyinput), ImGuiInputTextFlags_Password);
    ImGui::PopItemWidth();
    if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Xác thực") : ("Login key"), ImVec2(-1, 0))) {
        auto hThread = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)PressAuth, 0, 0, 0);
        Data::HandleList.push_back(hThread);
    }
    /*ImGui::SameLine( );*/
    if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Lấy key free") : ("Get free key"), ImVec2(-1, 0))) {
        system("start https://helioshax.xyz/getkey.php");
    }
    //if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Kích hoạt key") : ("Active license"), ImVec2(-1, 0))) {
    //    system("start https://helioshax.xyz/active");
    //}
    if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Buy VIP key") : ("Buy VIP key"), ImVec2(-1, 0))) {
        system("start https://discord.gg/rMcYMyzwAB");
    }
    ImGui::PopStyleVar(2);
    ImGui::End();
}
Add the 5 languages and A combobox to choose between them and translate yourself and everything dont forget the u8 and in arabic Dont forget to Reverse the arabic words so they stay connected to each other Please do all this and the main menu is here:
VOID DrawOldMenu() {
    if (!loadskin) {
        LoadSkins();
        loadskin = true;
    }
    /*DrawPreviewESP( );*/
    ImGui::SetNextWindowSize(ImVec2(800, 600));
    ImGui::PushStyleVar(ImGuiStyleVar_WindowTitleAlign, ImVec2(0.5f, 0.5f));
    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 8);

    string BeginText = "EG-HAX PUBG MOBILE - 3.8.0.2 (" + compilation_time + (" - ") + compilation_date + ")";
    string BeginText2 = "HELIOS-HAX PUBG MOBILE - 3.8.0.2 (" + compilation_time + (" - ") + compilation_date + ")";

    if (Data::IsEGUser == 1) {
        ImGui::Begin(BeginText.c_str(), &Setting::ShowMenu, Flags);
    }
    else {
        ImGui::Begin(BeginText2.c_str(), &Setting::ShowMenu, Flags);
    }
 
  
    const float ButtonWidth = (ImGui::GetContentRegionAvail().x - (5 - 1) * ImGui::GetStyle().ItemSpacing.x) / 5;
    ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 4);
    ButtonSetID(ICON_FA_HOME " Main", ImVec2(ButtonWidth, 0), &IndexTabs, NEWSINDEX);
    ImGui::SameLine();
    ButtonSetID(ICON_FA_EYE " ESP", ImVec2(ButtonWidth, 0), &IndexTabs, VISUALINDEX);
    ImGui::SameLine();
    ButtonSetID(ICON_FA_CROSSHAIRS " Aimbot", ImVec2(ButtonWidth, 0), &IndexTabs, AIMBOTINDEX);
    ImGui::SameLine();
    ButtonSetID(ICON_FA_EDIT " Memory", ImVec2(ButtonWidth, 0), &IndexTabs, MEMORYINDEX);
    ImGui::SameLine();
    ButtonSetID(ICON_FA_COG " Settings", ImVec2(ButtonWidth, 0), &IndexTabs, SETTINGINDEX);
    ImGui::PopStyleVar();
    ImGui::Separator();
    if (IndexTabs == NEWSINDEX) {
      //  std::cout << "Rendering chat messages." << std::endl;
     //   std::cout << "Data::ChatMessages size: " << Data::ChatMessages.size() << std::endl;

        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 8);
        if (ImGui::BeginChild("###Chat_Container", ImVec2(0, 0), true, ImGuiWindowFlags_NoScrollbar)) {
            float old_size_font = ImGui::GetFont()->Scale;
            ImGui::GetFont()->Scale *= 1.25f;
            ImGui::PushFont(ImGui::GetFont());
            ImGui::Text(ICON_FA_USER);
            ImGui::GetFont()->Scale = old_size_font;
            ImGui::PopFont();
            ImGui::SameLine();
            ImGui::Text(Data::TotalUser.c_str());
            // Reduced footer height calculation
            float footerHeight = ImGui::GetFrameHeightWithSpacing();

            if (ImGui::BeginChild("###Chat_Messages", ImVec2(0, -footerHeight), true)) {
                float currentY = 10.0f;
                const float MESSAGE_SPACING = 60.0f;

                DrawChat(u8"Đang kết nối đến máy chủ trò chuyện, xin vui lòng đợi...",
                    "Local",
                    ImColor(218, 143, 3, 255),
                    currentY);
                currentY += MESSAGE_SPACING;

                DrawChat(u8"Nếu có bất kì lỗi gì vui lòng liên hệ admin hoặc reseller của bạn.",
                    "System",
                    ImColor(0, 0, 255, 255),
                    currentY);
                currentY += MESSAGE_SPACING;

                std::string currentSender;
                for (const auto& msg : Data::ChatMessages) {
                    ImVec4 userColor = (msg.sender == Data::UserKey) ?
                        UserColor : ImVec4(1.0f, 1.0f, 1.0f, 1.0f);

                    if (currentSender != msg.sender) {
                        currentSender = msg.sender;
                        currentY += 10.0f;
                    }

                    DrawUserMessage(
                        msg.sender.c_str(),
                        msg.message.c_str(),
                        userColor,
                        currentY
                    );
                    currentY += MESSAGE_SPACING;
                }

                if (ImGui::GetScrollY() >= ImGui::GetScrollMaxY() - 20) {
                    ImGui::SetScrollHereY(1.0f);
                }

                ImGui::EndChild();
            }

            // Input area without extra spacing
            static char inputBuffer[1024] = "";
            ImGui::PushItemWidth(-1);
            if (ImGui::InputText("###ChatInput", inputBuffer, sizeof(inputBuffer),
                ImGuiInputTextFlags_EnterReturnsTrue)) {
                if (strlen(inputBuffer) > 0) {
                    SendChatMessage(inputBuffer);
                    inputBuffer[0] = '\0';
                }
                ImGui::SetKeyboardFocusHere(-1);
            }
            ImGui::PopItemWidth();

            ImGui::EndChild();
        }
        ImGui::PopStyleVar();
    }
    if (IndexTabs == VISUALINDEX) {
        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 8);
        ImGui::BeginChild("###Main_Child", ImVec2(0, 0), true);
        {
            ImGui::BeginChild("###Right_Child", ImVec2(ImGui::GetWindowSize().x / 3, 0), true);
            {
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện tên địch") : (u8"Show name enemy"), &Setting::Player::Name);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Vẽ xương địch") : (u8"Show skeleton enemy"), &Setting::Player::Skeleton);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Vẽ đường thẳng") : (u8"Show line"), &Setting::Player::SnapLines);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện khoảng cách địch") : (u8"Show distance enemy"), &Setting::Player::Distance);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện máu địch") : (u8"Show health"), &Setting::Player::Miscellanouse::Health);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện vũ khí đang cầm") : (u8"Show weapon enemy"), &Setting::Player::Weapon);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Vẽ hộp") : (u8"Show box"), &Setting::Player::Box);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện vật phẩm") : (u8"Show items"), &Setting::PickupItems::Visual::DetailsItems);
                if (Setting::PickupItems::Visual::DetailsItems) {
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện item trong hòm") : (u8"Show item in box"), &Setting::PickupItems::Visual::ShowItemInDeathBox);
                }
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện phương tiện") : (u8"Show vehicles"), &Setting::Vehicle::Vehicle);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện số địch xung quanh") : (u8"Show total enemy"), &Setting::InfoOverlay);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện số địch xung quanh & bot") : (u8"Show total enemy & bot"), &Setting::InfoOverlay2);
                if (Cheat::ModuleLoaded == true && (Data::IsFreeUser == -1 || Data::IsFreeUser == 0)) {
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Check núp tường") : (u8"Visible check"), &Setting::Player::VisibleCheck);
                }
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện bom và redzone") : (u8"Show bomb alerts and redzone "), &Setting::Alerts::OpenAllAlert);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện cảnh báo bị ngắm bắn") : (u8"Show enemy aiming"), &Setting::Player::AimStatus);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện tâm bo") : (u8"Show center zone"), &Setting::Player::ZonePrediction);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện Radar") : (u8"Show Radar"), &Setting::Player::Radar2);
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện 360Alert") : (u8"Show 360Alert"), &Setting::Player::Radar);

                // ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Load Esp Module") : (u8"Load Esp Module"), &Setting::LibmoduleEsp);
                ImGui::SameLine();
                HelpMarker((Setting::LanguageVNM == true) ? (u8"Đảm bảo rằng adb đã được bật và chỉ hoạt động ở VNG") : (u8"Make sure your adb is running and current version is VNG"));
                if (Setting::Internal) {
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Visibility") : (u8"Visibility"), &Setting::Vis);
                }
                /*ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"English") : (u8"Tiếng việt"), &Setting::LanguageVNM);*/
                ImGui::EndChild();
            }
            ImGui::SameLine();
            ImGui::SeparatorEx(ImGuiSeparatorFlags_Vertical);
            ImGui::SameLine();
            ImGui::BeginChild("###Left_Child", ImVec2(0, 0), true);
            {
                if (ImGui::BeginTabBar("###Left_TabBar", ImGuiTabBarFlags_Reorderable)) {
                    if (Setting::Player::Details) {
                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Cấu hình chung") : (u8"Visual ESP"))) {
                            ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                            {
                                if (ImGui::BeginTabBar("###SmallLeft_TabBar", ImGuiTabBarFlags_Reorderable)) {
                                    if (Setting::Player::Name) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Tên") : (u8"Name"))) {
                                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện mã quốc tịch") : (u8"Show nation enemy"), &Setting::Player::Miscellanouse::Nation);
                                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện ID địch") : (u8"Show ID enemy"), &Setting::Player::Miscellanouse::PlayerUID);
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc chữ") : (u8"Text color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::ColorEdit4("###Name_Color", Setting::Player::Name_Color);
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Border color") : (u8"Border color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::ColorEdit4("###NameBorder_Color", Setting::Player::NameBorder_Color);
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cỡ chữ") : (u8"Text thickness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###Name_Thickness", &Setting::Player::Name_ThickNess, 0, 60, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::Skeleton) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Xương") : (u8"Skeleton"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Chế độ màu") : (u8"Color mode"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            {
                                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Cố định") : ("Default"), (Setting::LanguageVNM == true) ? (u8"Theo team") : ("Team ID") };
                                                const char* Combo_Show = TextToChose[Setting::Player::SkeletonType];
                                                if (ImGui::BeginCombo("###Mode_Color", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                                        const bool is_selected = (Setting::Player::SkeletonType == n);
                                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                                            Setting::Player::SkeletonType = n;
                                                        if (is_selected)
                                                            ImGui::SetItemDefaultFocus();
                                                    }
                                                    ImGui::EndCombo();
                                                }
                                            }
                                            ImGui::PopItemWidth();
                                            if (Setting::Player::SkeletonType == 0) {
                                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu xương") : (u8"Skeleton color"));
                                                ImGui::PushItemWidth(-1);
                                                ImGui::SameLine();
                                                ImGui::ColorEdit4("###Skeleton_Color", Setting::Player::Skeleton_Color);
                                                ImGui::PopItemWidth();
                                            }
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Độ dày") : (u8"Thickness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###Skeleton_ThickNess", &Setting::Player::Skeleton_ThickNess, 0, 5, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::SnapLines) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Đường thẳng") : (u8"Line"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Chế độ màu") : (u8"Color mode"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            {
                                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Cố định") : ("Default"), (Setting::LanguageVNM == true) ? (u8"Theo team") : ("Team ID") };
                                                const char* Combo_Show = TextToChose[Setting::Player::SnapLinesType];
                                                if (ImGui::BeginCombo("###Mode_Color", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                                        const bool is_selected = (Setting::Player::SnapLinesType == n);
                                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                                            Setting::Player::SnapLinesType = n;
                                                        if (is_selected)
                                                            ImGui::SetItemDefaultFocus();
                                                    }
                                                    ImGui::EndCombo();
                                                }
                                            }
                                            ImGui::PopItemWidth();
                                            if (Setting::Player::SnapLinesType == 0) {
                                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu đường thẳng") : (u8"Line color"));
                                                ImGui::SameLine();
                                                ImGui::PushItemWidth(-1);
                                                ImGui::ColorEdit4("###SnapLines_Color", Setting::Player::SnapLines_Color);
                                                ImGui::PopItemWidth();
                                            }
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Độ dày") : (u8"Thick ness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###SnapLines_ThickNess", &Setting::Player::SnapLines_ThickNess, 0, 5, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::Distance) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Khoảng cách") : (u8"Distance"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc chữ") : (u8"Text color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::ColorEdit4("###Distance_Color", Setting::Player::Distance_Color);
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cỡ chữ") : (u8"Text thickness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###Distance_Thickness", &Setting::Player::Distance_ThickNess, 0, 60, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::Miscellanouse::Health) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Máu") : (u8"Health"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Loại hiển thị") : (u8"Health type"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            {
                                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Dạng thanh") : ("Type bar"), (Setting::LanguageVNM == true) ? (u8"Dạng chữ") : ("Type text") };
                                                const char* Combo_Show = TextToChose[Setting::Player::Miscellanouse::HealthID];
                                                if (ImGui::BeginCombo("###Box_Type", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                                        const bool is_selected = (Setting::Player::Miscellanouse::HealthID == n);
                                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                                            Setting::Player::Miscellanouse::HealthID = n;
                                                        if (is_selected)
                                                            ImGui::SetItemDefaultFocus();
                                                    }
                                                    ImGui::EndCombo();
                                                }
                                                ImGui::PopItemWidth();
                                            }
                                            if (Setting::Player::Miscellanouse::HealthID == 1) {
                                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc chữ") : (u8"Text color"));
                                                ImGui::SameLine();
                                                ImGui::PushItemWidth(-1);
                                                ImGui::ColorEdit4("###Health_Color", Setting::Player::Miscellanouse::Health_Color);
                                                ImGui::PopItemWidth();
                                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cỡ chữ") : (u8"Text thickness"));
                                                ImGui::SameLine();
                                                ImGui::PushItemWidth(-1);
                                                ImGui::SliderFloat("###Health_Thickness", &Setting::Player::Miscellanouse::Health_ThickNess, 0, 60, "%.3f");
                                                ImGui::PopItemWidth();
                                            }
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::Weapon) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Vũ khí") : (u8"Weapon"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc chữ") : (u8"Text color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::ColorEdit4("###Weapon_Color", Setting::Player::Weapon_Color);
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cỡ chữ") : (u8"Text thickness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###Weapon_Thickness", &Setting::Player::Weapon_ThickNess, 0, 60, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                  /*  if(Setting::Internal && Setting::Vis){
                                        ImGui::BeginTabItem("Visibility");
                                      
                                            ImGui::Text("Visible: "); ImGui::SameLine();    ImGui::ColorEdit4("###OpenColor", (float*)&Visible);
                                            ImGui::Text("Cover: "); ImGui::SameLine();    ImGui::ColorEdit4("###CoverColor", (float*)&Cover);

                                      
                                        ImGui::EndTabItem();
                                    }*/
                                 
                                    if (Setting::Player::Box) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Hộp") : (u8"Box"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Loại hiển thị") : (u8"Box type"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            {
                                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Hình chữ nhật") : ("Rectangle"), (Setting::LanguageVNM == true) ? (u8"4 góc") : ("4 edges") };
                                                const char* Combo_Show = TextToChose[Setting::Player::BoxType];
                                                if (ImGui::BeginCombo("###Box_Type", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                                        const bool is_selected = (Setting::Player::BoxType == n);
                                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                                            Setting::Player::BoxType = n;
                                                        if (is_selected)
                                                            ImGui::SetItemDefaultFocus();
                                                    }
                                                    ImGui::EndCombo();
                                                }
                                                ImGui::PopItemWidth();
                                            }
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu hộp") : (u8"Box color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            {
                                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Cố định") : ("Default"), (Setting::LanguageVNM == true) ? (u8"Theo team") : ("Team ID") };
                                                const char* Combo_Show = TextToChose[Setting::Player::BoxTypeColor];
                                                if (ImGui::BeginCombo("###Mode_Color", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                                        const bool is_selected = (Setting::Player::BoxTypeColor == n);
                                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                                            Setting::Player::BoxTypeColor = n;
                                                        if (is_selected)
                                                            ImGui::SetItemDefaultFocus();
                                                    }
                                                    ImGui::EndCombo();
                                                }
                                            }
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu hộp") : (u8"Box color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::ColorEdit4("###Box_Color", Setting::Player::Box_Color);
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Độ dày") : (u8"Box thickness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###Box_Thickness", &Setting::Player::Box_ThickNess, 0, 5, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::ZonePrediction) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Tâm bo") : (u8"Center zone"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc chữ") : (u8"Text color"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::ColorEdit4("###ZonePrediction_Color", Setting::Player::ZonePrediction_Color);
                                            ImGui::PopItemWidth();
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cỡ chữ") : (u8"Text thickness"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###ZonePrediction_Thickness", &Setting::Player::ZonePrediction_ThickNess, 0, 60, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Vis && Setting::Internal && (Data::IsFreeUser == -1 || Data::IsFreeUser == 0)) {
                                        
                                            if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Check núp tường") : (u8"Visible check"))) {
                                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc") : (u8"Color"));
                                                ImGui::SameLine();
                                                ImGui::PushItemWidth(-1);
                                                ImGui::ColorEdit4("###VisibleCheck_Color", (float*)&Visible);
                                                ImGui::PopItemWidth();
                                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu chưa lộ") : (u8"Color hidden"));
                                                ImGui::SameLine();
                                                ImGui::PushItemWidth(-1);
                                                ImGui::ColorEdit4("###VisibleCheckPart2_Color", (float*)&Cover);
                                                ImGui::PopItemWidth();
                                                ImGui::EndTabItem();
                                            }
                                        
                                    }
                                    if (Setting::Player::Radar) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Alert") : (u8"Alert"))) {
                                            /*
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Loại hiển thị") : (u8"Radar type"));
                                            ImGui::SameLine( );
                                            ImGui::PushItemWidth(-1);
                                            {
                                                const char* TextToChose[] = {(Setting::LanguageVNM == true) ? (u8"Khuất tầm nhìn") : ("Hide on screen"), (Setting::LanguageVNM == true) ? (u8"Cảnh báo 360 độ") : ("Alerts 360")};
                                                const char* Combo_Show = TextToChose[Setting::Player::RadarType];
                                                if (ImGui::BeginCombo("###Radar_Type", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                                        const bool is_selected = (Setting::Player::RadarType == n);
                                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                                            Setting::Player::RadarType = n;
                                                        if (is_selected)
                                                            ImGui::SetItemDefaultFocus( );
                                                    }
                                                    ImGui::EndCombo( );
                                                }
                                                ImGui::PopItemWidth( );
                                            }
                                            */
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Bán kính") : (u8"Radius"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderFloat("###Radar_Distance", &Setting::Player::Radar_Distance, 10, 300, "%.3f");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::Player::Radar2) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Radar") : (u8"Radar"))) {
                                            // Radar position
                                            ImGui::Text("Radar Position");
                                            ImGui::SliderFloat("Radar X", &RadarPosX, 0.0f, (float)ScreenInfo::Width, "%.0f");
                                            ImGui::SliderFloat("Radar Y", &RadarPosY, 0.0f, (float)ScreenInfo::Height, "%.0f");

                                            // Radar size
                                            ImGui::Text("Radar Size");
                                            ImGui::SliderFloat("Radar Width", &RadarWidth, 50.0f, 300.0f, "%.0f");
                                            ImGui::SliderFloat("Radar Height", &RadarHeight, 50.0f, 300.0f, "%.0f");

                                            // Radar border roundness
                                            ImGui::Text("Radar Style");
                                            ImGui::SliderFloat("Radar Rounding", &RadarRounding, 0.0f, 20.0f, "%.1f");

                                            // Radar detection range
                                            ImGui::Text("Distance For Red Enemy Alert (Close Enemies)");

                                            ImGui::SliderFloat("Red Enemy Distance", &Radar_EnemyCloseRange, 50.0f, 500.0f, "%.0f");


                                            ImGui::EndTabItem();
                                        }
                                    }
                                    if (Setting::LibmoduleEsp) {
                                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Esp Module") : (u8"Esp Module"))) {
                                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Thời gian cập nhật") : (u8"Delay time update"));
                                            ImGui::SameLine();
                                            ImGui::PushItemWidth(-1);
                                            ImGui::SliderInt("###UpdateModuleTick", &Setting::UpdateModuleTick, 0, 1000, "%dms");
                                            ImGui::PopItemWidth();
                                            ImGui::EndTabItem();
                                        }
                                    }
                                    ImGui::EndTabBar();
                                }
                                ImGui::EndChild();
                            }
                            ImGui::EndTabItem();
                        }

                        /* if (Setting::Player::VisibleCheck) {
                             ImGui::BeginTabItem("Vis");
                             ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                             {
                                 ImGui::Text("Visible: "); ImGui::SameLine();    ImGui::ColorEdit4("###OpenColor", (float*)&Visible);
                                 ImGui::Text("Cover: "); ImGui::SameLine();    ImGui::ColorEdit4("###CoverColor", (float*)&Cover);

                                 ImGui::EndChild();

                             }
                             ImGui::EndTabItem();
                         }*/


                        if (Setting::Alerts::OpenAllAlert) {
                            if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Bom nổ") : (u8"Grenade")))
                            {
                                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Kẻ đường đi của bom") : (u8"Draw grenade trajectory"), &Setting::Alerts::GrenadeAlert_Trajectory);
                                ImGui::SameLine();
                                ImGui::ColorEdit4("###GrenadeAlert_Trajectory_Color", Setting::Alerts::GrenadeAlert_Trajectory_Color, ImGuiColorEditFlags_NoInputs);
                                ImGui::EndTabItem();
                            }
                        }

                    }
                    if (Setting::Vehicle::Vehicle) {
                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Phương tiện") : (u8"Vehicles"))) {
                            ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                            {
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu sắc chữ") : (u8"Text color"));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::ColorEdit4("###Vehicle_Color", Setting::Vehicle::Vehicle_Color);
                                ImGui::PopItemWidth();
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cỡ chữ") : (u8"Text thickness"));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::SliderFloat("###Vehicle_Thickness", &Setting::Vehicle::Vehicle_ThickNess, 0, 60, "%.3f");
                                ImGui::PopItemWidth();
                                ImGui::EndChild();
                            }
                            ImGui::EndTabItem();
                        }
                    }
                    if (Setting::PickupItems::Visual::DetailsItems) {
                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Vật phẩm") : (u8"Items"))) {
                            if (ImGui::BeginTabBar("###Item_Pick", ImGuiTabBarFlags_Reorderable)) {
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Súng") : (u8"Weapon"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        ImGui::Text("Max Distance For Items:");
                                        ImGui::SliderInt("###MaxDis", &Setting::PickupItems::Visual::DetailsItemsMaxDistance, 10, 500);
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            {
                                                ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                                ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                                ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                                ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                              
                                                OneLineDrawTable("M16A4", &Setting::PickupItems::Rifles::M16A4, &Setting::PickupItems::Rifles::M16A4_ThickNess, Setting::PickupItems::Rifles::M16A4_Color);
                                                OneLineDrawTable("SCARL", &Setting::PickupItems::Rifles::SCARL, &Setting::PickupItems::Rifles::SCARL_ThickNess, Setting::PickupItems::Rifles::SCARL_Color);
                                                OneLineDrawTable("M416", &Setting::PickupItems::Rifles::M416, &Setting::PickupItems::Rifles::M416_ThickNess, Setting::PickupItems::Rifles::M416_Color);
                                                OneLineDrawTable("FAMAS", &Setting::PickupItems::Rifles::FAMAS, &Setting::PickupItems::Rifles::FAMAS_ThickNess, Setting::PickupItems::Rifles::FAMAS_Color);
                                                OneLineDrawTable("QBZ", &Setting::PickupItems::Rifles::QBZ, &Setting::PickupItems::Rifles::QBZ_ThickNess, Setting::PickupItems::Rifles::QBZ_Color);
                                                OneLineDrawTable("G63C", &Setting::PickupItems::Rifles::G63C, &Setting::PickupItems::Rifles::G63C_ThickNess, Setting::PickupItems::Rifles::G63C_Color);
                                                OneLineDrawTable("AUG", &Setting::PickupItems::Rifles::AUG, &Setting::PickupItems::Rifles::AUG_ThickNess, Setting::PickupItems::Rifles::AUG_Color);
                                                OneLineDrawTable("AKM", &Setting::PickupItems::Rifles::AKM, &Setting::PickupItems::Rifles::AKM_ThickNess, Setting::PickupItems::Rifles::AKM_Color);
                                                OneLineDrawTable("M762", &Setting::PickupItems::Rifles::M762, &Setting::PickupItems::Rifles::M762_ThickNess, Setting::PickupItems::Rifles::M762_Color);
                                                OneLineDrawTable("HoneyBadger", &Setting::PickupItems::Rifles::HoneyBadger, &Setting::PickupItems::Rifles::HoneyBadger_ThickNess, Setting::PickupItems::Rifles::HoneyBadger_Color);
                                                OneLineDrawTable("GROZA", &Setting::PickupItems::Rifles::GROZA, &Setting::PickupItems::Rifles::GROZA_ThickNess, Setting::PickupItems::Rifles::GROZA_Color);
                                                OneLineDrawTable("MK14", &Setting::PickupItems::Rifles::MK14, &Setting::PickupItems::Rifles::MK14_ThickNess, Setting::PickupItems::Rifles::MK14_Color);
                                                OneLineDrawTable("THOMPSON", &Setting::PickupItems::SMG::THOMPSON, &Setting::PickupItems::SMG::THOMPSON_ThickNess, Setting::PickupItems::SMG::THOMPSON_Color);
                                                OneLineDrawTable("UMP45", &Setting::PickupItems::SMG::UMP45, &Setting::PickupItems::SMG::UMP45_ThickNess, Setting::PickupItems::SMG::UMP45_Color);
                                                OneLineDrawTable("P90", &Setting::PickupItems::SMG::P90, &Setting::PickupItems::SMG::P90_ThickNess, Setting::PickupItems::SMG::P90_Color);
                                                OneLineDrawTable("UZI", &Setting::PickupItems::SMG::UZI, &Setting::PickupItems::SMG::UZI_ThickNess, Setting::PickupItems::SMG::UZI_Color);
                                                OneLineDrawTable("BIZON", &Setting::PickupItems::SMG::BIZON, &Setting::PickupItems::SMG::BIZON_ThickNess, Setting::PickupItems::SMG::BIZON_Color);
                                                OneLineDrawTable("MP5K", &Setting::PickupItems::SMG::MP5K, &Setting::PickupItems::SMG::MP5K_ThickNess, Setting::PickupItems::SMG::MP5K_Color);
                                                OneLineDrawTable("VECTOR", &Setting::PickupItems::SMG::VECTOR, &Setting::PickupItems::SMG::VECTOR_ThickNess, Setting::PickupItems::SMG::VECTOR_Color);
                                                OneLineDrawTable("WIN94", &Setting::PickupItems::Sniper::WIN94, &Setting::PickupItems::Sniper::WIN94_ThickNess, Setting::PickupItems::Sniper::WIN94_Color);
                                                OneLineDrawTable("VSS", &Setting::PickupItems::Sniper::VSS, &Setting::PickupItems::Sniper::VSS_ThickNess, Setting::PickupItems::Sniper::VSS_Color);
                                                OneLineDrawTable("MINI14", &Setting::PickupItems::Sniper::MINI14, &Setting::PickupItems::Sniper::MINI14_ThickNess, Setting::PickupItems::Sniper::MINI14_Color);
                                                OneLineDrawTable("QBU", &Setting::PickupItems::Sniper::QBU, &Setting::PickupItems::Sniper::QBU_ThickNess, Setting::PickupItems::Sniper::QBU_Color);
                                                OneLineDrawTable("MK12", &Setting::PickupItems::Sniper::MK12, &Setting::PickupItems::Sniper::MK12_ThickNess, Setting::PickupItems::Sniper::MK12_Color);
                                                OneLineDrawTable("MK47", &Setting::PickupItems::Sniper::MK47, &Setting::PickupItems::Sniper::MK47_ThickNess, Setting::PickupItems::Sniper::MK47_Color);
                                                OneLineDrawTable("SLR", &Setting::PickupItems::Sniper::SLR, &Setting::PickupItems::Sniper::SLR_ThickNess, Setting::PickupItems::Sniper::SLR_Color);
                                                OneLineDrawTable("SKS", &Setting::PickupItems::Sniper::SKS, &Setting::PickupItems::Sniper::SKS_ThickNess, Setting::PickupItems::Sniper::SKS_Color);
                                                OneLineDrawTable("KAR98", &Setting::PickupItems::Sniper::KAR98, &Setting::PickupItems::Sniper::KAR98_ThickNess, Setting::PickupItems::Sniper::KAR98_Color);
                                                OneLineDrawTable("MOSIN", &Setting::PickupItems::Sniper::MOSIN, &Setting::PickupItems::Sniper::MOSIN_ThickNess, Setting::PickupItems::Sniper::MOSIN_Color);
                                                OneLineDrawTable("BOW", &Setting::PickupItems::Sniper::BOW, &Setting::PickupItems::Sniper::BOW_ThickNess, Setting::PickupItems::Sniper::BOW_Color);
                                                OneLineDrawTable("AWM", &Setting::PickupItems::Sniper::AWM, &Setting::PickupItems::Sniper::AWM_ThickNess, Setting::PickupItems::Sniper::AWM_Color);
                                                OneLineDrawTable("AMR", &Setting::PickupItems::Sniper::AMR, &Setting::PickupItems::Sniper::AMR_ThickNess, Setting::PickupItems::Sniper::AMR_Color);
                                                OneLineDrawTable("M249", &Setting::PickupItems::AutoMachine::M249, &Setting::PickupItems::AutoMachine::M249_ThickNess, Setting::PickupItems::AutoMachine::M249_Color);
                                                OneLineDrawTable("MG3", &Setting::PickupItems::AutoMachine::MG3, &Setting::PickupItems::AutoMachine::MG3_ThickNess, Setting::PickupItems::AutoMachine::MG3_Color);
                                                OneLineDrawTable("DP28", &Setting::PickupItems::AutoMachine::DP28, &Setting::PickupItems::AutoMachine::DP28_ThickNess, Setting::PickupItems::AutoMachine::DP28_Color);
                                                OneLineDrawTable("S686", &Setting::PickupItems::ShotGun::S686, &Setting::PickupItems::ShotGun::S686_ThickNess, Setting::PickupItems::ShotGun::S686_Color);
                                                OneLineDrawTable("S1897", &Setting::PickupItems::ShotGun::S1897, &Setting::PickupItems::ShotGun::S1897_ThickNess, Setting::PickupItems::ShotGun::S1897_Color);
                                                OneLineDrawTable("M1014", &Setting::PickupItems::ShotGun::M1014, &Setting::PickupItems::ShotGun::M1014_ThickNess, Setting::PickupItems::ShotGun::M1014_Color);
                                                OneLineDrawTable("Neostead2000", &Setting::PickupItems::ShotGun::Neostead2000, &Setting::PickupItems::ShotGun::Neostead2000_ThickNess, Setting::PickupItems::ShotGun::Neostead2000_Color);
                                                OneLineDrawTable("S12K", &Setting::PickupItems::ShotGun::S12K, &Setting::PickupItems::ShotGun::S12K_ThickNess, Setting::PickupItems::ShotGun::S12K_Color);
                                                OneLineDrawTable("DBS", &Setting::PickupItems::ShotGun::DBS, &Setting::PickupItems::ShotGun::DBS_ThickNess, Setting::PickupItems::ShotGun::DBS_Color);
                                                OneLineDrawTable("P1911", &Setting::PickupItems::Pistols::P1911, &Setting::PickupItems::Pistols::P1911_ThickNess, Setting::PickupItems::Pistols::P1911_Color);
                                                OneLineDrawTable("R45", &Setting::PickupItems::Pistols::R45, &Setting::PickupItems::Pistols::R45_ThickNess, Setting::PickupItems::Pistols::R45_Color);
                                                OneLineDrawTable("DesertEagle", &Setting::PickupItems::Pistols::DesertEagle, &Setting::PickupItems::Pistols::DesertEagle_ThickNess, Setting::PickupItems::Pistols::DesertEagle_Color);
                                                OneLineDrawTable("P92", &Setting::PickupItems::Pistols::P92, &Setting::PickupItems::Pistols::P92_ThickNess, Setting::PickupItems::Pistols::P92_Color);
                                                OneLineDrawTable("P18C", &Setting::PickupItems::Pistols::P18C, &Setting::PickupItems::Pistols::P18C_ThickNess, Setting::PickupItems::Pistols::P18C_Color);
                                                OneLineDrawTable("Vz61", &Setting::PickupItems::Pistols::Vz61, &Setting::PickupItems::Pistols::Vz61_ThickNess, Setting::PickupItems::Pistols::Vz61_Color);
                                                OneLineDrawTable("R1895", &Setting::PickupItems::Pistols::R1895, &Setting::PickupItems::Pistols::R1895_ThickNess, Setting::PickupItems::Pistols::R1895_Color);
                                                OneLineDrawTable("Flaregun", &Setting::PickupItems::Pistols::Flaregun, &Setting::PickupItems::Pistols::Flaregun_ThickNess, Setting::PickupItems::Pistols::Flaregun_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Bom") : (u8"Grenade"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("Grenade", &Setting::PickupItems::Others::Grenade, &Setting::PickupItems::Others::Grenade_ThickNess, Setting::PickupItems::Others::Grenade_Color);
                                                OneLineDrawTable("Smoke", &Setting::PickupItems::Others::Smoke, &Setting::PickupItems::Others::Smoke_ThickNess, Setting::PickupItems::Others::Smoke_Color);
                                                OneLineDrawTable("Molotof", &Setting::PickupItems::Others::Molotof, &Setting::PickupItems::Others::Molotof_ThickNess, Setting::PickupItems::Others::Molotof_Color);
                                                OneLineDrawTable("Apple", &Setting::PickupItems::Others::Apple, &Setting::PickupItems::Others::Apple_ThickNess, Setting::PickupItems::Others::Apple_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Máu") : (u8"Health"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("Adrenaline", &Setting::PickupItems::NeccessaryHealth::Adrenaline, &Setting::PickupItems::NeccessaryHealth::Adrenaline_ThickNess, Setting::PickupItems::NeccessaryHealth::Adrenaline_Color);
                                                OneLineDrawTable("EnergyDrink", &Setting::PickupItems::NeccessaryHealth::EnergyDrink, &Setting::PickupItems::NeccessaryHealth::EnergyDrink_ThickNess, Setting::PickupItems::NeccessaryHealth::EnergyDrink_Color);
                                                OneLineDrawTable("Painkiller", &Setting::PickupItems::NeccessaryHealth::Painkiller, &Setting::PickupItems::NeccessaryHealth::Painkiller_ThickNess, Setting::PickupItems::NeccessaryHealth::Painkiller_Color);
                                                OneLineDrawTable("FirstaidKit", &Setting::PickupItems::NeccessaryHealth::FirstaidKit, &Setting::PickupItems::NeccessaryHealth::FirstaidKit_ThickNess, Setting::PickupItems::NeccessaryHealth::FirstaidKit_Color);
                                                OneLineDrawTable("Medkit", &Setting::PickupItems::NeccessaryHealth::Medkit, &Setting::PickupItems::NeccessaryHealth::Medkit_ThickNess, Setting::PickupItems::NeccessaryHealth::Medkit_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Balô") : (u8"Balo"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("BagLv1", &Setting::PickupItems::Bag::BagLv1, &Setting::PickupItems::Bag::BagLv1_ThickNess, Setting::PickupItems::Bag::BagLv1_Color);
                                                OneLineDrawTable("BagLv2", &Setting::PickupItems::Bag::BagLv2, &Setting::PickupItems::Bag::BagLv2_ThickNess, Setting::PickupItems::Bag::BagLv2_Color);
                                                OneLineDrawTable("BagLv3", &Setting::PickupItems::Bag::BagLv3, &Setting::PickupItems::Bag::BagLv3_ThickNess, Setting::PickupItems::Bag::BagLv3_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Mũ") : (u8"Helemt"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("HelmetLv1", &Setting::PickupItems::Helmet::HelmetLv1, &Setting::PickupItems::Helmet::HelmetLv1_ThickNess, Setting::PickupItems::Helmet::HelmetLv1_Color);
                                                OneLineDrawTable("HelmetLv2", &Setting::PickupItems::Helmet::HelmetLv2, &Setting::PickupItems::Helmet::HelmetLv2_ThickNess, Setting::PickupItems::Helmet::HelmetLv2_Color);
                                                OneLineDrawTable("HelmetLv3", &Setting::PickupItems::Helmet::HelmetLv3, &Setting::PickupItems::Helmet::HelmetLv3_ThickNess, Setting::PickupItems::Helmet::HelmetLv3_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Giáp") : (u8"Armor"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("ArmorLv1", &Setting::PickupItems::Armor::ArmorLv1, &Setting::PickupItems::Armor::ArmorLv1_ThickNess, Setting::PickupItems::Armor::ArmorLv1_Color);
                                                OneLineDrawTable("ArmorLv2", &Setting::PickupItems::Armor::ArmorLv2, &Setting::PickupItems::Armor::ArmorLv2_ThickNess, Setting::PickupItems::Armor::ArmorLv2_Color);
                                                OneLineDrawTable("ArmorLv3", &Setting::PickupItems::Armor::ArmorLv3, &Setting::PickupItems::Armor::ArmorLv3_ThickNess, Setting::PickupItems::Armor::ArmorLv3_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Đạn dược") : (u8"Ammo"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("Ammo762", &Setting::PickupItems::Ammo::Ammo762, &Setting::PickupItems::Ammo::Ammo762_ThickNess, Setting::PickupItems::Ammo::Ammo762_Color);
                                                OneLineDrawTable("Ammo45ACP", &Setting::PickupItems::Ammo::Ammo45ACP, &Setting::PickupItems::Ammo::Ammo45ACP_ThickNess, Setting::PickupItems::Ammo::Ammo45ACP_Color);
                                                OneLineDrawTable("Ammo556", &Setting::PickupItems::Ammo::Ammo556, &Setting::PickupItems::Ammo::Ammo556_ThickNess, Setting::PickupItems::Ammo::Ammo556_Color);
                                                OneLineDrawTable("Ammo9", &Setting::PickupItems::Ammo::Ammo9, &Setting::PickupItems::Ammo::Ammo9_ThickNess, Setting::PickupItems::Ammo::Ammo9_Color);
                                                OneLineDrawTable("Ammo300Magnum", &Setting::PickupItems::Ammo::Ammo300Magnum, &Setting::PickupItems::Ammo::Ammo300Magnum_ThickNess, Setting::PickupItems::Ammo::Ammo300Magnum_Color);
                                                OneLineDrawTable("Ammo12Guage", &Setting::PickupItems::Ammo::Ammo12Guage, &Setting::PickupItems::Ammo::Ammo12Guage_ThickNess, Setting::PickupItems::Ammo::Ammo12Guage_Color);
                                                OneLineDrawTable("AmmoFlareGun", &Setting::PickupItems::Ammo::AmmoFlareGun, &Setting::PickupItems::Ammo::AmmoFlareGun_ThickNess, Setting::PickupItems::Ammo::AmmoFlareGun_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Phụ kiện") : (u8"Accessory"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("AREx", &Setting::PickupItems::Accessory::AREx, &Setting::PickupItems::Accessory::AREx_ThickNess, Setting::PickupItems::Accessory::AREx_Color);
                                                OneLineDrawTable("ARExQk", &Setting::PickupItems::Accessory::ARExQk, &Setting::PickupItems::Accessory::ARExQk_ThickNess, Setting::PickupItems::Accessory::ARExQk_Color);
                                                OneLineDrawTable("LargeCompensator", &Setting::PickupItems::Accessory::LargeCompensator, &Setting::PickupItems::Accessory::LargeCompensator_ThickNess, Setting::PickupItems::Accessory::LargeCompensator_Color);
                                                OneLineDrawTable("LargeSuppressor", &Setting::PickupItems::Accessory::LargeSuppressor, &Setting::PickupItems::Accessory::LargeSuppressor_ThickNess, Setting::PickupItems::Accessory::LargeSuppressor_Color);
                                                OneLineDrawTable("SniperCompensator", &Setting::PickupItems::Accessory::SniperCompensator, &Setting::PickupItems::Accessory::SniperCompensator_ThickNess, Setting::PickupItems::Accessory::SniperCompensator_Color);
                                                OneLineDrawTable("SniperSuppressor", &Setting::PickupItems::Accessory::SniperSuppressor, &Setting::PickupItems::Accessory::SniperSuppressor_ThickNess, Setting::PickupItems::Accessory::SniperSuppressor_Color);
                                                OneLineDrawTable("ThumbGrip", &Setting::PickupItems::Accessory::ThumbGrip, &Setting::PickupItems::Accessory::ThumbGrip_ThickNess, Setting::PickupItems::Accessory::ThumbGrip_Color);
                                                OneLineDrawTable("Angled", &Setting::PickupItems::Accessory::Angled, &Setting::PickupItems::Accessory::Angled_ThickNess, Setting::PickupItems::Accessory::Angled_Color);
                                                OneLineDrawTable("LightGrip", &Setting::PickupItems::Accessory::LightGrip, &Setting::PickupItems::Accessory::LightGrip_ThickNess, Setting::PickupItems::Accessory::LightGrip_Color);
                                                OneLineDrawTable("HalfGrip", &Setting::PickupItems::Accessory::HalfGrip, &Setting::PickupItems::Accessory::HalfGrip_ThickNess, Setting::PickupItems::Accessory::HalfGrip_Color);
                                                OneLineDrawTable("Vertical", &Setting::PickupItems::Accessory::Vertical, &Setting::PickupItems::Accessory::Vertical_ThickNess, Setting::PickupItems::Accessory::Vertical_Color);
                                                OneLineDrawTable("Reddot", &Setting::PickupItems::Accessory::Reddot, &Setting::PickupItems::Accessory::Reddot_ThickNess, Setting::PickupItems::Accessory::Reddot_Color);
                                                OneLineDrawTable("Holo", &Setting::PickupItems::Accessory::Holo, &Setting::PickupItems::Accessory::Holo_ThickNess, Setting::PickupItems::Accessory::Holo_Color);
                                                OneLineDrawTable("Scope2X", &Setting::PickupItems::Accessory::Scope2X, &Setting::PickupItems::Accessory::Scope2X_ThickNess, Setting::PickupItems::Accessory::Scope2X_Color);
                                                OneLineDrawTable("Scope3X", &Setting::PickupItems::Accessory::Scope3X, &Setting::PickupItems::Accessory::Scope3X_ThickNess, Setting::PickupItems::Accessory::Scope3X_Color);
                                                OneLineDrawTable("Scope4X", &Setting::PickupItems::Accessory::Scope4X, &Setting::PickupItems::Accessory::Scope4X_ThickNess, Setting::PickupItems::Accessory::Scope4X_Color);
                                                OneLineDrawTable("Scope6X", &Setting::PickupItems::Accessory::Scope6X, &Setting::PickupItems::Accessory::Scope6X_ThickNess, Setting::PickupItems::Accessory::Scope6X_Color);
                                                OneLineDrawTable("Scope8X", &Setting::PickupItems::Accessory::Scope8X, &Setting::PickupItems::Accessory::Scope8X_ThickNess, Setting::PickupItems::Accessory::Scope8X_Color);
                                                OneLineDrawTable("M416Stock", &Setting::PickupItems::Accessory::M416Stock, &Setting::PickupItems::Accessory::M416Stock_ThickNess, Setting::PickupItems::Accessory::M416Stock_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Khác") : (u8"Others"))) {
                                    ImGui::BeginChild("###LeftSmall_Child", ImVec2(0, 0), true);
                                    {
                                        if (ImGui::BeginTable("Items", 4, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_PreciseWidths | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                            ImGui::TableSetupColumn("Show", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Item name                                ", ImGuiTableColumnFlags_WidthFixed, 270);
                                            ImGui::TableSetupColumn("Color", ImGuiTableColumnFlags_WidthFixed, 35);
                                            ImGui::TableSetupColumn("Font size", ImGuiTableColumnFlags_WidthFixed, 55);
                                            ImGui::TableNextColumn();
                                            {
                                                ImGui::Text("Show");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Item name                                ");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Color");
                                                ImGui::TableNextColumn();
                                                ImGui::Text("Font size");
                                                ImGui::TableNextColumn();
                                                OneLineDrawTable("AirDrop", &Setting::PickupItems::Others::AirDrop, &Setting::PickupItems::Others::AirDrop_ThickNess, Setting::PickupItems::Others::AirDrop_Color);
                                                OneLineDrawTable("DeathBox", &Setting::PickupItems::Others::DeathBox, &Setting::PickupItems::Others::DeathBox_ThickNess, Setting::PickupItems::Others::DeathBox_Color);
                                                OneLineDrawTable("Pan", &Setting::PickupItems::Melee::Pan, &Setting::PickupItems::Melee::Pan_ThickNess, Setting::PickupItems::Melee::Pan_Color);
                                                OneLineDrawTable("Gascan", &Setting::PickupItems::Others::Gascan, &Setting::PickupItems::Others::Gascan_ThickNess, Setting::PickupItems::Others::Gascan_Color);
                                                OneLineDrawTable("TokenShop", &Setting::PickupItems::Others::TokenShop, &Setting::PickupItems::Others::TokenShop_ThickNess, Setting::PickupItems::Others::TokenShop_Color);
                                                OneLineDrawTable("SecurityCard", &Setting::PickupItems::Others::SecurityCard, &Setting::PickupItems::Others::SecurityCard_ThickNess, Setting::PickupItems::Others::SecurityCard_Color);
                                            }
                                            ImGui::EndTable();
                                        }
                                        ImGui::EndChild();
                                    }
                                    ImGui::EndTabItem();
                                }
                                ImGui::EndTabBar();
                            }
                            ImGui::EndTabItem();
                        }
                    }
                    //Teammate//
                    if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Teammate") : (u8"Teammate"))) {
                        ImGui::Text((Setting::LanguageVNM == true) ? (u8"Nhấn F10 để cài địch thành đồng đội") : (u8"Press F10 to set nearest Enemy (by crosshair) as Teammate"));
                        ImGui::BeginChild("###BigMain_Child", ImVec2(0, 0), true);
                        {
                            if (ImGui::BeginTable("Teammate", 3, ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInner)) {
                                ImGui::TableSetupColumn("STT", ImGuiTableColumnFlags_WidthFixed, 45.0f);
                                ImGui::TableSetupColumn("Role ID", ImGuiTableColumnFlags_WidthFixed, 335.0f);
                                ImGui::TableSetupColumn("Action", ImGuiTableColumnFlags_WidthFixed, 58.0f);
                                ImGui::TableNextColumn();
                                ImGui::Text("STT");
                                ImGui::TableNextColumn();
                                ImGui::Text("Role ID");
                                ImGui::TableNextColumn();
                                ImGui::Text("Action");
                                ImGui::TableNextColumn();
                                for (int i = 0; i < Teammate::TeammateList.size(); i++)
                                {
                                    ImGui::Text(std::to_string(i).c_str());
                                    ImGui::TableNextColumn();
                                    ImGui::Text(Teammate::TeammateList[i].c_str());
                                    ImGui::TableNextColumn();
                                    std::string ButtonRemove = "Reset###RemoveButton" + std::to_string(i);
                                    if (ImGui::Button(ButtonRemove.c_str())) {
                                        Teammate::TeammateList[i] = "0";
                                    }
                                    ImGui::TableNextColumn();
                                }
                                ImGui::EndTable();
                            }
                            ImGui::EndChild();
                        }
                        ImGui::EndTabItem();
                    }
                    //EndTeammate//
                    ImGui::EndTabBar();
                }
                ImGui::EndChild();
            }
            ImGui::EndChild();
        }
        ImGui::PopStyleVar();
    }
    if (IndexTabs == AIMBOTINDEX) {
        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 8);
        ImGui::BeginChild("###Main_Child", ImVec2(0, 0), true);
        {
            ImGui::BeginChild("###Right_Child", ImVec2(ImGui::GetWindowSize().x / 3, 0), true);
            {
                ImGui::Checkbox("Aimbot", &Setting::AimAlternative);
                ImGui::Checkbox("Macro", &Setting::Macro);
                ImGui::EndChild();
            }
            ImGui::SameLine();
            ImGui::SeparatorEx(ImGuiSeparatorFlags_Vertical);
            ImGui::SameLine();
            ImGui::BeginChild("###Left_Child", ImVec2(0, 0), true);
            {
                if (ImGui::BeginTabBar("###Left_TabBar", ImGuiTabBarFlags_Reorderable)) {
                    if (Setting::AimAlternative) {
                        if (ImGui::BeginTabItem("Aimbot###Aimbot")) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Vị trí aimbot") : (u8"Target aimbot"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            {
                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Đầu") : ("Head"), (Setting::LanguageVNM == true) ? (u8"Cổ") : ("Neck"), (Setting::LanguageVNM == true) ? (u8"Ngực") : ("Chest"), (Setting::LanguageVNM == true) ? (u8"Gần tâm nhất") : ("Nearest crosshair"), (Setting::LanguageVNM == true) ? (u8"Gần tâm nhất (Low headshot)") : ("Nearest crosshair (Low headshot)") };
                                const char* Combo_Show = TextToChose[Setting::TargetAim];
                                if (ImGui::BeginCombo("###Target_Aim", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                        const bool is_selected = (Setting::TargetAim == n);
                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                            Setting::TargetAim = n;
                                        if (is_selected)
                                            ImGui::SetItemDefaultFocus();
                                    }
                                    ImGui::EndCombo();
                                }
                            }
                            ImGui::PopItemWidth();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím aimbot") : (u8"Key aimbot"));
                            ImGui::SameLine();
                            ImGui::PushID(0);
                            BindKey(&Setting::KeyAim);
                            ImGui::PopID();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Loại aimbot") : (u8"Type aimbot"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            {
                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Đạn đuổi") : ("Silent aim"), (Setting::LanguageVNM == true) ? (u8"Mouse event") : ("Mouse event"), (Setting::LanguageVNM == true) ? (u8"Memory") : ("Memory") };

                                const char* Combo_Show = TextToChose[Setting::TypeAim];
                                if (ImGui::BeginCombo("###Type_Aim", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                        const bool is_selected = (Setting::TypeAim == n);
                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                            Setting::TypeAim = n;
                                        if (is_selected)
                                            ImGui::SetItemDefaultFocus();
                                    }
                                    ImGui::EndCombo();
                                }
                            }
                            ImGui::PopItemWidth();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Aim Method") : (u8"Aim Method"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            {
                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Firing") : ("Firing"), (Setting::LanguageVNM == true) ? (u8"Scoping") : ("Scoping"), (Setting::LanguageVNM == true) ? (u8"Any") : ("Any") };

                                const char* Combo_Show = TextToChose[Setting::AimMethod];
                                if (ImGui::BeginCombo("###Aim_Method", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                        const bool is_selected = (Setting::AimMethod == n);
                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                            Setting::AimMethod = n;
                                        if (is_selected)
                                            ImGui::SetItemDefaultFocus();
                                    }
                                    ImGui::EndCombo();
                                }
                            }
                            ImGui::PopItemWidth();
                            if (Setting::TypeAim == 1 || Setting::TypeAim == 2 || Setting::TypeAim == 3) {
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Tốc độ aimbot") : (u8"Aimbot Speed"));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::SliderInt("###Aimbot_Speed", &Setting::SmoothAim, 0, 50);
                                ImGui::PopItemWidth();
                            }
                            if (!Setting::AutoFov) {

                            
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Giới hạn vùng aimbot") : (u8"Field of view aimbot "));
                            ImGui::SameLine();
                            HelpMarker((Setting::LanguageVNM == true) ? (u8"Nếu giới hạn = 0, tính năng này sẽ hổng hoạt động") : (u8"Limited fov = 0, if you changed this features will not work"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###FOV", &Setting::FovAim, 0, 1000);
                            ImGui::PopItemWidth();
                            }
                       //     ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Auto Fov") : (u8"Auto Fov"), &Setting::AutoFov);
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện vùng aimbot") : (u8"Show aimbot fov"), &Setting::Fov);
                            if (Setting::Fov) {
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Màu hiện vùng") : (u8"FOV color"));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::ColorEdit4("###FOV_COLOR", Setting::Fov_Color);
                                ImGui::PopItemWidth();
                            }
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Skip Bot") : (u8"Skip Bots"), &Setting::SkipAI); //
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Aim vào người đã bị hạ gục") : (u8"Shoot the knocked enemy"), &Setting::ShootKnock);
                            if (Setting::ShootKnock) {
                                std::string strCaptionKnock = "\t";
                                strCaptionKnock.append((Setting::LanguageVNM == true) ? (u8"- Phím kích hoạt : ") : (u8"- Activation key : "));
                                ImGui::Text(strCaptionKnock.c_str());
                                ImGui::SameLine();
                                HelpMarker((Setting::LanguageVNM == true) ? (u8"Nếu chưa cài phím, hack sẽ mặc định aim vào người đã knock nếu bật tùy chọn này") : ("If not setup the key, hack will auto aim at the enemy is knocked if enable this option"));
                                ImGui::SameLine();
                                ImGui::PushID(1);
                                BindKey(&Setting::KeyShootKnock);
                                ImGui::PopID();
                            }
                            ImGui::Separator();
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Aimbot đón đầu") : (u8"Aimbot prediction"), &Setting::Predict);
                            if (Setting::Predict) {
                                ImGui::SameLine();
                                ImGui::SetNextItemWidth(-1);
                                ImGui::SliderFloat("###PredictAim", &Setting::PredictAim, 1, 3, "x%.3f");
                                ImGui::PopItemWidth();
                            }
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Giới hạn khoảng cách") : (u8"Limit Track Distance"), &Setting::AimLimitDistance);
                            if (Setting::AimLimitDistance) {
                                ImGui::Text("NoScope");
                                ImGui::SameLine();
                                ImGui::SetNextItemWidth(-1);
                                ImGui::SliderFloat("###AimLimitDistance", &Setting::AimLimitDistanceValue, 0, 500, "%.3fm");
                                ImGui::PopItemWidth();
                                ImGui::Text("Scope");
                                ImGui::SameLine();
                                ImGui::SetNextItemWidth(-1);
                                ImGui::SliderFloat("###ScopingAimLimitDistance", &Setting::ScopingAimLimitDistanceValue, 0, 500, "%.3fm");
                                ImGui::PopItemWidth();
                            }

                            ImGui::Separator();
                            if (Setting::Internal == true && (Data::IsFreeUser == -1 || Data::IsFreeUser == 0)) {
                                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Check núp tường") : (u8"Visibile check"), &Setting::BulletCheckVisible);
                                if (Setting::BulletCheckVisible == true) {
                                    ImGui::SameLine();
                                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tự động bắn") : (u8"Auto fire"), &Setting::SpecialFeatures::AutoFire);
                                }
                                ImGui::Separator();
                            }
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Kẻ đường thẳng đang ngắm địch nào") : (u8"Draw line enemy aiming"), &Setting::AimLine);
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Khóa địch khi giữ phím aimbot") : (u8"Lock enemy when hold key aimbot"), &Setting::LockEnemyPressAim);
                            ImGui::Separator();
                            ImGui::Text(u8"Nếu bị giật lên xuống, vui lòng hạ tốc độ aimbot, đồng thời điều chỉnh tốc độ chuột\nphù hợp trong cài đặt game.");
                            ImGui::Text(u8"Nếu aimbot bị xuống chân, vui lòng điều chỉnh thông số Macro sao cho phù hợp\ntừng loại súng.");
                            ImGui::EndTabItem();
                        }
                    }
                    if (Setting::Macro) {
                        if (ImGui::BeginTabItem("Macro")) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Tỉ lệ kéo chuột") : (u8"Macro value"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###MacroAim", &Setting::MacroAim, 0, 10);
                            ImGui::PopItemWidth();
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tự tap súng") : (u8"Auto tap"), &Setting::AutoTap);
                            ImGui::SameLine();
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Chỉ ghìm khi dùng aimbot") : (u8"Only active when use aimbot"), &Setting::MacroWithAim);
                            if (Setting::AutoTap) {
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Delay mỗi tap (ms): ") : (u8"Delay by tap (ms): "));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::DragInt("###AutoTapDelay", &Setting::AutoTapDelay, 0, 0, 100);
                                ImGui::PopItemWidth();
                            }
                            ImGui::EndTabItem();
                        }
                    }
                    if (Setting::TypeAim == 0) {
                        if (ImGui::BeginTabItem((Setting::LanguageVNM == true) ? (u8"Đạn đuổi") : ("Bullet tracking"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cầm súng lên để bắt đầu quy trình kích đạn đuổi, không cần xả đạn lung tung,\n") : (u8"Take the gun to active bullet tracking, not need spam ammo,\n"));
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"nếu mất đạn đuổi giữa trận ấn P là ok.") : (u8"if got problem with bullet track in game press P to fix."));
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tự fix mất đạn đuổi") : ("Auto fix bullet track problem"), &Setting::BulletTrack::AutoFix);
                            ImGui::SameLine();
                            HelpMarker((Setting::LanguageVNM == true) ? (u8"Tự khôi phục đạn đuổi khi phát hiện bị mất, tuy nhiên có thể làm tăng tỉ lệ bị đơ game.") : ("Auto fix bullet tracking problem when detect, but can increase the change freeze game."));
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Bật aimbot") : ("Enable aimbot"), &Setting::BulletTrack::OpenAim);
                            ImGui::SameLine();
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Đạn đuổi cũ (BAN)") : ("Camera cache track (BAN)"), &Setting::BulletTrack::CameraCache);
                            ImGui::Text("Z-Position");
                            ImGui::SameLine();
                            HelpMarker((Setting::LanguageVNM == true) ? (u8"Tăng/giảm chiều cao ở mức nhẹ khi dùng đạn đuổi, giúp tăng tỉ lệ headshot hoặc ngược lại.") : ("Increase/decrease height of position when use bullet tracking, help to increase headshot or opposite."));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderFloat("###Z-Position", &Setting::BulletTrack::ZPosition, 0, 15, "%.3f");
                            ImGui::PopItemWidth();
                            ImGui::Separator();
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tỉ lệ trúng đạn cao (BAN)") : ("Bypass FOV limit (BAN)"), &Setting::BulletTrack::BypassFovLitmit);
                            if (Setting::Internal) {
                                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Internal Tracking (BAN)") : ("Internal Tracking (BAN)"), & Setting::Skins::BulletTracking::skin);
                                ImGui::SameLine();
                                HelpMarker((Setting::LanguageVNM == true) ? (u8"Internally Based Brutal Bullet Track (360 Degree Tracking)") : ("Internally Based Brutal Bullet Track (360 Degree Tracking)"));

                            }
                       
                            ImGui::EndTabItem();
                        }
                    }
                    ImGui::EndTabBar();
                }
                ImGui::EndChild();
            }
            ImGui::EndChild();
        }
        ImGui::PopStyleVar();
    }
    if (IndexTabs == MEMORYINDEX) {
        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 8);
        ImGui::BeginChild("###Main_Child", ImVec2(0, 0), true);
        {
            ImGui::PopStyleVar();
            ImGui::BeginChild("###Left_Child", ImVec2(ImGui::GetWindowSize().x / 3, 0), true);
            {
               
                if (Data::IsFreeUser == -1 || Data::IsFreeUser == 0) {
                    if (!Setting::Memory::MagicBullet) {
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tăng tỉ lệ trúng đạn") : (u8"Increase area damage"), &Setting::Memory::MagicBullet);
                    }
                    else {
                        if (Setting::Memory::bAntiMemory == true) {
                            if (Data::NetDriver > 0) {
                                CheckBoxColored((Setting::LanguageVNM == true) ? (u8"Tăng tỉ lệ trúng đạn") : (u8"Increase area damage"), &Setting::Memory::MagicBullet, ImVec4(0, 1, 0, 1));
                            }
                            if (Data::NetDriver == 0) {
                                CheckBoxColored((Setting::LanguageVNM == true) ? (u8"Tăng tỉ lệ trúng đạn") : (u8"Increase area damage"), &Setting::Memory::MagicBullet, ImVec4(1, 0, 0, 1));
                            }
                        }
                        else {
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tăng tỉ lệ trúng đạn") : (u8"Increase area damage"), &Setting::Memory::MagicBullet);
                        }
                    }
                    // ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện dame") : (u8"Show dame"), &Setting::Memory::bShowDame);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Chạy xe nhanh") : (u8"Fast car"), &Setting::Memory::bFastCar);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Silent God view") : (u8"Silent God view"), & Setting::sgv);

                    if (!Setting::Memory::bGodView) {
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"God view") : (u8"God view"), &Setting::Memory::bGodView);
                    }
                    else {
                        if (Setting::Memory::bAntiMemory == true) {
                            if (Data::NetDriver > 0) {
                                CheckBoxColored((Setting::LanguageVNM == true) ? (u8"God view") : (u8"God view"), &Setting::Memory::bGodView, ImVec4(0, 1, 0, 1));
                            }
                            if (Data::NetDriver == 0) {
                                CheckBoxColored((Setting::LanguageVNM == true) ? (u8"God view") : (u8"God view"), &Setting::Memory::bGodView, ImVec4(1, 0, 0, 1));
                            }
                        }
                        else {
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"God view") : (u8"God view"), &Setting::Memory::bGodView);
                        }
                    }
                    if (Setting::Memory::bAntiMemory)
                        CheckBoxColored((Setting::LanguageVNM == true) ? (u8"Chống check memory") : (u8"Anti memory checker"), &Setting::Memory::bAntiMemory, ImVec4(0, 1, 0, 1));
                    else
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Chống check memory") : (u8"Anti memory checker"), &Setting::Memory::bAntiMemory);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"X effect") : (u8"X Effect"), &Setting::Memory::xEffect);
                    if (Setting::Internal) {
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Mod skin") : (u8"Mod Skin"), & Setting::Memory::bModSkin);
                    }
                    /* ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Macro nhảy nằm") : (u8"Macro jump & prone"),&Setting::Memory::JumpProne);*/
                    //ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Giảm giật") : (u8"Less recoil"), &Setting::Memory::LessRecoil);
                    /*ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Xoay camera") : (u8"Camera spin"), &Setting::Memory::CameraSpin);*/  
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Mở khóa 120FPS, HDR") : (u8"Unlock 120FPS, HDR"), &Setting::Memory::bUnlockFPS);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Súng to") : (u8"Big weapon"), &Setting::Memory::bBigWeapon);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Spin bot") : (u8"Spin bot"), &Setting::Memory::SpinBot);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Flash V1") : (u8"Flash V1"), &Setting::fastrun);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Flash V2") : (u8"Flash V2"), &Setting::fastrun2);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"High Jump") : (u8"High Jump"), &Setting::Memory::highjump);
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Slow Animation") : (u8"Slow Animation"), &Setting::SlowAnimation);
                 
                    if (Setting::Internal) {
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Show Damage") : (u8"Show Damage"), & Setting::Skins::ShowDamage::skin);
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Silent Weapon View") : (u8"Silent Weapon View"), & Setting::Skins::gungodview::skin);
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"TP To Player") : (u8"TP To Player"), & Setting::Skins::teleportmetoplayer::skin);

                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Fast Shoot") : (u8"Fast Shoot"), & Setting::fastShoot);
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Instant hit") : (u8"Instant hit"), & Setting::Memory::instanthit);

                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Rainbow Crosshair") : (u8"Rainbow Crosshair"), & Setting::Skins::RainbowCross::skin);
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Small Crosshair") : (u8"Small Crosshair"), & Setting::Skins::NoRecoil::skin);
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Fast Weapon Switch") : (u8"Fast Weapon Switch"), & Setting::Skins::fastswitch::skin);
                        ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"AutoFire (Internal Mode)") : (u8"AutoFire (Internal Mode)"), &Setting::Skins::AutoFire::skin);
                        if (Setting::Skins::AutoFire::skin) {
                            ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"AutoFire VisCheck") : (u8"AutoFire VisCheck"), & Setting::Skins::VisCheck::skin);

                        }
                    }
                    /*ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện sát thương") : (u8"Show damage"), &Setting::Memory::bShowDame);*/

                   /* ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Report tự động") : (u8"Auto report"), &Setting::Memory::AutoReport);*/

                   /* ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tự động nhiệm vụ report") : (u8"Auto do report mission"), &Setting::Memory::AutoReport);*/
                }
                else if (Data::IsFreeUser == 1) {
                    string text = (Setting::LanguageVNM == true) ? (u8"** Thuê key VIP ngay **") : (u8"** Buy VIP key now **");
                    ImGui::SetCursorPosX((ImGui::GetWindowWidth() - ImGui::CalcTextSize(text.c_str()).x) / 2.f);
                    ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), text.c_str());
                }
                // ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Mod skin") : (u8"Mod skin"), &Setting::Memory::bModSkin);
                ImGui::EndChild();
            }
            ImGui::SameLine();
            ImGui::SeparatorEx(ImGuiSeparatorFlags_Vertical);
            ImGui::SameLine();
            ImGui::BeginChild("###Right_Child", ImVec2(0, 0), true);
            {
                if (Data::IsFreeUser == -1 || Data::IsFreeUser == 0) {
                    if (Setting::Memory::MagicBullet) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Tăng tỉ lệ trúng đạn") : (u8"Increase area damage"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Tỉ lệ tăng: ") : (u8"Value increase"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###MagicValue", &Setting::Memory::MagicValue, 0, 7);
                            ImGui::PopItemWidth();
                        }
                    }
                        if (Setting::fastShoot) {
                            if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Fast Shoot") : (u8"Fast Shoot"))) {
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Value: ") : (u8"Value: "));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::SliderFloat("###FastShootValue", &Setting::fastShootValue, -200.0f, 200.0f, "x%.1f");
                                ImGui::PopItemWidth();
                            }
                        }
                        if (Setting::Memory::instanthit) {
                            if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Instant hit") : (u8"Instant hit"))) {
                                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Value: ") : (u8"Value: "));
                                ImGui::SameLine();
                                ImGui::PushItemWidth(-1);
                                ImGui::SliderFloat("###InstantHitValue", &Setting::Memory::instanthitv, 0, 9999, "x%.1f");
                                ImGui::PopItemWidth();
                            }
                        }
                    if (Setting::Memory::bFastCar) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Chạy xe nhanh") : (u8"Fast car"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím tăng tốc: ") : (u8"Fast forward key: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::FastCarForwardKey, ImVec2(0, 0), "FastCarForwardKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím giảm tốc: ") : (u8"Fast backward key: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::FastCarBackwardKey, ImVec2(0, 0), "FastCarBackwardKey");
                        }
                    }
                    if (Setting::Memory::bGodView) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"God view") : (u8"God view"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt GOD VIEW trên: ") : (u8"Key active GOD VIEW top: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::GodviewTopKey, ImVec2(0, 0), "GodviewTopKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt GOD VIEW dưới: ") : (u8"Key active GOD VIEW bot: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::GodviewBotKey, ImVec2(0, 0), "GodviewBotKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt GOD VIEW tiến: ") : (u8"Key active GOD VIEW front: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::GodviewFrontKey, ImVec2(0, 0), "GodviewFrontKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt GOD VIEW trái: ") : (u8"Key active GOD VIEW left: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::GodviewLeftKey, ImVec2(0, 0), "GodviewLeftKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt GOD VIEW phải: ") : (u8"Key active GOD VIEW right: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::GodviewRightKey, ImVec2(0, 0), "GodviewRightKey");
                        }
                    }
                  
                    if (Setting::fastrun) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Flash V1") : (u8"Flash V1"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"V1 Speed: ") : (u8"V1 Speed: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderFloat("###FlashSlider", &Setting::V3SPD, 1.0f, 100.0f, (Setting::LanguageVNM == true) ? (u8"%.1f") : (u8"%.1f"));
                            ImGui::PopItemWidth();
                        }
                    }
                    if (Setting::fastrun2) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Flash V2") : (u8"Flash V2"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"V2 Speed: ") : (u8"V2 Speed: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderFloat("###FlashV2Slider", &Setting::V3SPD2, 1.0f, 100.0f, (Setting::LanguageVNM == true) ? (u8"%.1f") : (u8"%.1f"));
                            ImGui::PopItemWidth();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Speed Key") : (u8"Speed Key"));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::FastV3key, ImVec2(0, 0), "SpeedKey");
                        }
                    }
                    if (Setting::Memory::highjump) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"High Jump") : (u8"High Jump"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"High Jump Key") : (u8"High Jump Key"));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::highjumpkey, ImVec2(0, 0), "HighJumpKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Value: ") : (u8"Value: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderFloat("###HighJumpSlider", &Setting::HighF, 443.f, 1443.f, (Setting::LanguageVNM == true) ? (u8"%.1f") : (u8"%.1f"));
                            ImGui::PopItemWidth();
                        }
                    }
                    if (Setting::Memory::bAntiMemory) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Chống check memory") : (u8"Anti memory checker"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Thời gian chờ: ") : (u8"Time delay: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###AntiMemoryValue", &Setting::Memory::AntiMemoryValue, 1, 120, (Setting::LanguageVNM == true) ? (u8"%d giây") : (u8"%d seconds"));
                            ImGui::PopItemWidth();
                        }
                    }
                    if (Setting::Memory::xEffect) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"X Effect") : (u8"X Effect"))) {
                            ImGui::Text("Head hit color: ");
                            ImGui::SameLine();
                            ImGui::ColorEdit4("###xEffectHead_Color", Setting::Memory::xEffectHead_Color, ImGuiColorEditFlags_NoInputs);
                            ImGui::SameLine();
                            ImGui::Text("Random");
                            ImGui::SameLine();
                            ImGui::Checkbox("###xEffectHead_ColorRandom", &Setting::Memory::xEffectHead_ColorRandom);
                            ImGui::Text("Body hit color: ");
                            ImGui::SameLine();
                            ImGui::ColorEdit4("###xEffectBody_Color", Setting::Memory::xEffectBody_Color, ImGuiColorEditFlags_NoInputs);
                            ImGui::SameLine();
                            ImGui::Text("Random");
                            ImGui::SameLine();
                            ImGui::Checkbox("###xEffectBody_ColorRandom", &Setting::Memory::xEffectBody_ColorRandom);
                            ImGui::Text("Scale: ");
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###xEffectScale", &Setting::Memory::xEffectScale, 1, 1000, "x%d");
                            ImGui::PopItemWidth();
                        }
                    }
                    if (Setting::Memory::bModSkin) {
                        ImGui::BeginTabBar("##SkinsTabs");



                        // Outfits Tab

                        if (ImGui::BeginTabItem(ICON_FA_PLANE" Gun skin")) {
                            ImGui::BeginChild("WeaponsChild", ImVec2(0, 0), true);
                            {
                                ImGui::Checkbox(" KillMessage", &Setting::KillMessage);
                                ImGui::Checkbox(" Deadbox", &Setting::ModDeadBox);
                                ImGui::Checkbox(" Lobby Skins", &Setting::LobbySkins);
                                ImGui::Checkbox(" Fix 1s Ban (!)", &Setting::Fix1Second);
                                // Set up the table with 3 columns: Name, Select, and Custom
                                if (ImGui::BeginTable("AssaultRiflesTable", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
                                    ImGui::TableSetupColumn("Name");
                                    ImGui::TableSetupColumn("Select");
                                    ImGui::TableSetupColumn("Custom");
                                    ImGui::TableHeadersRow();

                                    // Function to streamline adding rows
                                    auto add_row = [](const char* name, const char* combo_label, int& skin_index, const char* skins[], const int skin_ids[], int num_skins, char* custom_id, int id_size) {
                                        ImGui::TableNextRow();
                                        ImGui::TableNextColumn();
                                        ImGui::TextUnformatted(name);
                                        ImGui::TableNextColumn();

                                        // Set width for the combo box
                                        ImGui::SetNextItemWidth(150.0f);  // Adjust width as needed
                                        if (ImGui::Combo(combo_label, &skin_index, skins, num_skins)) {
                                            // Update the customID based on the selected skin
                                            int selected_skin_id = skin_ids[skin_index];
                                            snprintf(custom_id, id_size, "%d", selected_skin_id);  // Set the customID to the selected skin's ID
                                        }

                                        ImGui::TableNextColumn();

                                        // Unique label for each InputText to avoid ID conflicts
                                        std::string unique_label = "##Custom_" + std::string(name);
                                        ImGui::SetNextItemWidth(200.0f);  // Adjust width for the custom input box

                                        // InputText to allow manual input or overriding of the custom ID
                                        ImGui::InputText(unique_label.c_str(), custom_id, id_size);

                                        // If the user manually modifies the customID, it will override the combo box selection
                                        };


                                    // Skins data for each weapon
                                    static const char* m416_skins[] = { "Default M416", "Glacier", "The Fool", "Wanderer", "Lizard", "Wild", "TechnoCore", "Imperial", "Silver", "Tidal Embrace", "Shinobi Kami", "Diamond Mummy" };
                                    static int m416_skin_index = 0;
                                    static char m416_custom_id[16] = "";

                                    static const char* scarl_skins[] = { "Default SCAR-L", "Water", "Enchanted", "Operation", "Hextech", "Thorn", "Bloodstained", "Folly's" };
                                    static int scarl_skin_index = 0;
                                    static char scarl_custom_id[16] = "";
                                    static int akm_skin_index = 0;


                                    static char akm_custom_id[16] = "";

                                    static const char* m762_skins[] = { "Default M762", "Unicorn", "Concerto", "Deadly", "Stray Rebellion", "Starcore", "Messi", "Noctum Sunder" };
                                    static int m762_skin_index = 0;
                                    static char m762_custom_id[16] = "";

                                    static const char* ace32_skins[] = { "Default ACE32", "Beam Blast", "Icicle Spike - ACE32" };
                                    static int ace32_skin_index = 0;
                                    static char ace32_custom_id[16] = "";

                                    static const char* groza_skins[] = { "Default GROZA", "Forest", "Eventide", "Ryomen", "Splendid", "River", "Pumpkin" };
                                    static int groza_skin_index = 0;
                                    static char groza_custom_id[16] = "";

                                    static const char* aug_skins[] = { "Default AUG", "Wandering", "Evangelion", "Forsaken" };
                                    static int aug_skin_index = 0;
                                    static char aug_custom_id[16] = "";

                                    static const char* qbz_skins[] = { "Default QBZ", "Dazzling", "Fatal", "Nether" };
                                    static int qbz_skin_index = 0;
                                    static char qbz_custom_id[16] = "";

                                    static const char* m16a4_skins[] = { "Default M16A4", "Blood", "Aurora", "Radiant", "Skeletal", "Dracoguard" };
                                    static int m16a4_skin_index = 0;
                                    static char m16a4_custom_id[16] = "";

                                    // Add rows for each weapon
                                    //int m416_skin_index = 0;
                                    add_row("M416", "##M416Skins", m416_skin_index, Setting::Skins::m416::m416_skins, Setting::Skins::m416::m416_skin_ids, IM_ARRAYSIZE(Setting::Skins::m416::m416_skins), Setting::Skins::m416::customID, sizeof(Setting::Skins::m416::customID));


                                    add_row("AKM", "##AKMSkins", akm_skin_index, Setting::Skins::AKM::akm_skins,
                                        Setting::Skins::AKM::akm_skin_ids, IM_ARRAYSIZE(Setting::Skins::AKM::akm_skins),
                                        Setting::Skins::AKM::customID, sizeof(Setting::Skins::AKM::customID));


                                    add_row("M762", "##M762Skins", m762_skin_index, Setting::Skins::M762::m762_skins,
                                        Setting::Skins::M762::m762_skin_ids, IM_ARRAYSIZE(Setting::Skins::M762::m762_skins),
                                        Setting::Skins::M762::customID, sizeof(Setting::Skins::M762::customID));


                                    add_row("SCAR-L", "##SCARLSkins", scarl_skin_index, Setting::Skins::SCARL::scarl_skins,
                                        Setting::Skins::SCARL::scarl_skin_ids, IM_ARRAYSIZE(Setting::Skins::SCARL::scarl_skins),
                                        Setting::Skins::SCARL::customID, sizeof(Setting::Skins::SCARL::customID));


                                    add_row("M16A4", "##M16A4Skins", m16a4_skin_index, Setting::Skins::M16A4::m16a4_skins,
                                        Setting::Skins::M16A4::m16a4_skin_ids, IM_ARRAYSIZE(Setting::Skins::M16A4::m16a4_skins),
                                        Setting::Skins::M16A4::customID, sizeof(Setting::Skins::M16A4::customID));
                                    add_row("GROZA", "##GROZASkins", groza_skin_index, Setting::Skins::GROZA::groza_skins,
                                        Setting::Skins::GROZA::groza_skin_ids, IM_ARRAYSIZE(Setting::Skins::GROZA::groza_skins),
                                        Setting::Skins::GROZA::customID, sizeof(Setting::Skins::GROZA::customID));
                                    add_row("AUG", "##AUGSkins", aug_skin_index, Setting::Skins::AUG::aug_skins,
                                        Setting::Skins::AUG::aug_skin_ids, IM_ARRAYSIZE(Setting::Skins::AUG::aug_skins),
                                        Setting::Skins::AUG::customID, sizeof(Setting::Skins::AUG::customID));

                                    //	int qbz_skin_index = 0;  // Start with the first skin selected
                                    add_row("QBZ", "##QBZSkins", qbz_skin_index, Setting::Skins::QBZ::qbz_skins,
                                        Setting::Skins::QBZ::qbz_skin_ids, IM_ARRAYSIZE(Setting::Skins::QBZ::qbz_skins),
                                        Setting::Skins::QBZ::customID, sizeof(Setting::Skins::QBZ::customID));

                                    add_row("ACE32", "##ACE32Skins", ace32_skin_index, Setting::Skins::ACE32::ace32_skins,
                                        Setting::Skins::ACE32::ace32_skin_ids, IM_ARRAYSIZE(Setting::Skins::ACE32::ace32_skins),
                                        Setting::Skins::ACE32::customID, sizeof(Setting::Skins::ACE32::customID));
                                    static int ump_skin = 0;
                                    static int uzi_skin = 0;
                                    static int thome_skin = 0;
                                    static int vctor_skin = 0;
                                    static int pithon_skin = 0;
                                    static int kar_skin = 0;
                                    static int awm_skin = 0;
                                    static int m24_skin = 0;
                                    static int amr_skin = 0;
                                    static int sks_skin = 0;
                                    static int vss_skin = 0;
                                    static int mini14_skin = 0;
                                    static int mk14_skin = 0;
                                    static int slr_skin = 0;
                                    static int mk12_skin = 0;
                                    static int mg3_skin = 0;
                                    static int dp28_skin = 0;
                                    static int m249_skin = 0;
                                    static int shotgun_skin = 0;
                                    static int skorpion_skin = 0;
                                    static int pan_skin = 0;
                                    static int grenade_skin = 0;
                                    static int honey_skin = 0;
                                    static int mirado_skin = 0;
                                    static int dacia_skin = 0;
                                    static int uaz_skin = 0;
                                    static int couperp_skin = 0;
                                    static int moto_skin = 0;
                                    static int DBS_skin = 0;
                                    static int FAMAS_skin = 0;
                                    static int M1014_skin = 0;
                                    static int P90_skin = 0;
                                    static int HoneyBadger_skin = 0;

                                    add_row("DBS", "##DBSSkins", DBS_skin, Setting::Skins::DBS::DBS_skins, Setting::Skins::DBS::DBS_skin_ids, IM_ARRAYSIZE(Setting::Skins::DBS::DBS_skins), Setting::Skins::DBS::customID, sizeof(Setting::Skins::DBS::customID));
                                    add_row("FAMAS", "##FAMASSkins", FAMAS_skin, Setting::Skins::FAMAS::FAMAS_skins, Setting::Skins::FAMAS::FAMAS_skin_ids, IM_ARRAYSIZE(Setting::Skins::FAMAS::FAMAS_skins), Setting::Skins::FAMAS::customID, sizeof(Setting::Skins::FAMAS::customID));
                                    add_row("M1014", "##M1014Skins", M1014_skin, Setting::Skins::M1014::M1014_skins, Setting::Skins::M1014::M1014_skin_ids, IM_ARRAYSIZE(Setting::Skins::M1014::M1014_skins), Setting::Skins::M1014::customID, sizeof(Setting::Skins::M1014::customID));
                                    add_row("P90", "##P90Skins", P90_skin, Setting::Skins::P90::P90_skins, Setting::Skins::P90::P90_skin_ids, IM_ARRAYSIZE(Setting::Skins::P90::P90_skins), Setting::Skins::P90::customID, sizeof(Setting::Skins::P90::customID));
                                    add_row("HoneyBadger", "##HoneyBadgerSkins", HoneyBadger_skin, Setting::Skins::HoneyBadger::HoneyBadger_skins, Setting::Skins::HoneyBadger::HoneyBadger_skin_ids, IM_ARRAYSIZE(Setting::Skins::HoneyBadger::HoneyBadger_skins), Setting::Skins::HoneyBadger::customID, sizeof(Setting::Skins::HoneyBadger::customID));
                                    add_row("UMP", "##UMPSkins", ump_skin, Setting::Skins::UMP::ump_skins, Setting::Skins::UMP::ump_skin_ids, IM_ARRAYSIZE(Setting::Skins::UMP::ump_skins), Setting::Skins::UMP::customID, sizeof(Setting::Skins::UMP::customID));
                                    add_row("UZi", "##UZiSkins", uzi_skin, Setting::Skins::UZI::uzi_skins, Setting::Skins::UZI::uzi_skin_ids, IM_ARRAYSIZE(Setting::Skins::UZI::uzi_skins), Setting::Skins::UZI::customID, sizeof(Setting::Skins::UZI::customID));
                                    add_row("Thome", "##ThomeSkins", thome_skin, Setting::Skins::Thome::thome_skins, Setting::Skins::Thome::thome_skin_ids, IM_ARRAYSIZE(Setting::Skins::Thome::thome_skins), Setting::Skins::Thome::customID, sizeof(Setting::Skins::Thome::customID));
                                    add_row("Vctor", "##VctorSkins", vctor_skin, Setting::Skins::Vctor::vctor_skins, Setting::Skins::Vctor::vctor_skin_ids, IM_ARRAYSIZE(Setting::Skins::Vctor::vctor_skins), Setting::Skins::Vctor::customID, sizeof(Setting::Skins::Vctor::customID));
                                    add_row("Pithon", "##PithonSkins", pithon_skin, Setting::Skins::Pithon::pithon_skins, Setting::Skins::Pithon::pithon_skin_ids, IM_ARRAYSIZE(Setting::Skins::Pithon::pithon_skins), Setting::Skins::Pithon::customID, sizeof(Setting::Skins::Pithon::customID));
                                    add_row("Kar", "##KarSkins", kar_skin, Setting::Skins::kar::kar_skins, Setting::Skins::kar::kar_skin_ids, IM_ARRAYSIZE(Setting::Skins::kar::kar_skins), Setting::Skins::kar::customID, sizeof(Setting::Skins::kar::customID));
                                    add_row("AWM", "##AWMSkins", awm_skin, Setting::Skins::AWM::awm_skins, Setting::Skins::AWM::awm_skin_ids, IM_ARRAYSIZE(Setting::Skins::AWM::awm_skins), Setting::Skins::AWM::customID, sizeof(Setting::Skins::AWM::customID));
                                    add_row("M24", "##M24Skins", m24_skin, Setting::Skins::M24::m24_skins, Setting::Skins::M24::m24_skin_ids, IM_ARRAYSIZE(Setting::Skins::M24::m24_skins), Setting::Skins::M24::customID, sizeof(Setting::Skins::M24::customID));
                                    add_row("AMR", "##AMRSkins", amr_skin, Setting::Skins::AMR::amr_skins, Setting::Skins::AMR::amr_skin_ids, IM_ARRAYSIZE(Setting::Skins::AMR::amr_skins), Setting::Skins::AMR::customID, sizeof(Setting::Skins::AMR::customID));
                                //	add_row("SKS", "##SKSSkins", sks_skin, Setting::Skins::SKS::sks_skins, Setting::Skins::SKS::sks_skin_ids, IM_ARRAYSIZE(Setting::Skins::SKS::sks_skins), Setting::Skins::SKS::customID, sizeof(Setting::Skins::SKS::customID));
                                    //add_row("VSS", "##VSSSkins", vss_skin, Setting::Skins::VSS::vss_skins, Setting::Skins::VSS::vss_skin_ids, IM_ARRAYSIZE(Setting::Skins::VSS::vss_skins), Setting::Skins::VSS::customID, sizeof(Setting::Skins::VSS::customID));
                                //	add_row("Mini14", "##Mini14Skins", mini14_skin, Setting::Skins::Mini14::mini14_skins, Setting::Skins::Mini14::mini14_skin_ids, IM_ARRAYSIZE(Setting::Skins::Mini14::mini14_skins), Setting::Skins::Mini14::customID, sizeof(Setting::Skins::Mini14::customID));
                                    add_row("Mk14", "##Mk14Skins", mk14_skin, Setting::Skins::Mk14::mk14_skins, Setting::Skins::Mk14::mk14_skin_ids, IM_ARRAYSIZE(Setting::Skins::Mk14::mk14_skins), Setting::Skins::Mk14::customID, sizeof(Setting::Skins::Mk14::customID));
                                    //	add_row("SLR", "##SLRSkins", slr_skin, Setting::Skins::SLR::slr_skins, Setting::Skins::SLR::slr_skin_ids, IM_ARRAYSIZE(Setting::Skins::SLR::slr_skins), Setting::Skins::SLR::customID, sizeof(Setting::Skins::SLR::customID));
                                    //	add_row("Mk12", "##Mk12Skins", mk12_skin, Setting::Skins::Mk12::mk12_skins, Setting::Skins::Mk12::mk12_skin_ids, IM_ARRAYSIZE(Setting::Skins::Mk12::mk12_skins), Setting::Skins::Mk12::customID, sizeof(Setting::Skins::Mk12::customID));
                                    add_row("MG3", "##MG3Skins", mg3_skin, Setting::Skins::MG3::mg3_skins, Setting::Skins::MG3::mg3_skin_ids, IM_ARRAYSIZE(Setting::Skins::MG3::mg3_skins), Setting::Skins::MG3::customID, sizeof(Setting::Skins::MG3::customID));
                                    add_row("DP28", "##DP28Skins", dp28_skin, Setting::Skins::DP28::dp28_skins, Setting::Skins::DP28::dp28_skin_ids, IM_ARRAYSIZE(Setting::Skins::DP28::dp28_skins), Setting::Skins::DP28::customID, sizeof(Setting::Skins::DP28::customID));
                                    add_row("M249", "##M249Skins", m249_skin, Setting::Skins::M249::m249_skins, Setting::Skins::M249::m249_skin_ids, IM_ARRAYSIZE(Setting::Skins::M249::m249_skins), Setting::Skins::M249::customID, sizeof(Setting::Skins::M249::customID));
                                    //add_row("Shotgun", "##ShotgunSkins", shotgun_skin, Setting::Skins::Shotgun::shotgun_skins, Setting::Skins::Shotgun::shotgun_skin_ids, IM_ARRAYSIZE(Setting::Skins::Shotgun::shotgun_skins), Setting::Skins::Shotgun::customID, sizeof(Setting::Skins::Shotgun::customID));
                                    //add_row("Skorpion", "##SkorpionSkins", skorpion_skin, Setting::Skins::Skorpion::skorpion_skins, Setting::Skins::Skorpion::skorpion_skin_ids, IM_ARRAYSIZE(Setting::Skins::Skorpion::skorpion_skins), Setting::Skins::Skorpion::customID, sizeof(Setting::Skins::Skorpion::customID));
                                    add_row("Pan", "##PanSkins", pan_skin, Setting::Skins::Pan::pan_skins, Setting::Skins::Pan::pan_skin_ids, IM_ARRAYSIZE(Setting::Skins::Pan::pan_skins), Setting::Skins::Pan::customID, sizeof(Setting::Skins::Pan::customID));
                                    add_row("Grenade", "##GrenadeSkins", grenade_skin, Setting::Skins::Grenade::pan_skins, Setting::Skins::Grenade::pan_skin_ids, IM_ARRAYSIZE(Setting::Skins::Grenade::pan_skins), Setting::Skins::Grenade::customID, sizeof(Setting::Skins::Grenade::customID));
                                    //	add_row("Mirado", "##MiradoSkins", mirado_skin, Setting::Skins::Mirado::mirado_skins, Setting::Skins::Mirado::mirado_skin_ids, IM_ARRAYSIZE(Setting::Skins::Mirado::mirado_skins), Setting::Skins::Mirado::customID, sizeof(Setting::Skins::Mirado::customID));

                                    /*	add_row("SCAR-L", "##SCARLSkins", scarl_skin_index, scarl_skins, IM_ARRAYSIZE(scarl_skins), Setting::Skins::SCARL::customID, sizeof(Setting::Skins::SCARL::customID));
                                        add_row("AKM", "##AKMSkins", akm_skin_index, akm_skins, IM_ARRAYSIZE(akm_skins), Setting::Skins::AKM::customID, sizeof(Setting::Skins::AKM::customID));
                                        add_row("M762", "##M762Skins", m762_skin_index, m762_skins, IM_ARRAYSIZE(m762_skins), Setting::Skins::M762::customID, sizeof(Setting::Skins::M762::customID));
                                        add_row("ACE32", "##ACE32Skins", ace32_skin_index, ace32_skins, IM_ARRAYSIZE(ace32_skins), Setting::Skins::ACE32::customID, sizeof(Setting::Skins::ACE32::customID));
                                        add_row("GROZA", "##GROZASkins", groza_skin_index, groza_skins, IM_ARRAYSIZE(groza_skins), Setting::Skins::GROZA::customID, sizeof(Setting::Skins::GROZA::customID));
                                        add_row("AUG", "##AUGSkins", aug_skin_index, aug_skins, IM_ARRAYSIZE(aug_skins), Setting::Skins::AUG::customID, sizeof(Setting::Skins::AUG::customID));
                                        add_row("QBZ", "##QBZSkins", qbz_skin_index, qbz_skins, IM_ARRAYSIZE(qbz_skins), Setting::Skins::QBZ::customID, sizeof(Setting::Skins::QBZ::customID));
                                        add_row("M16A4", "##M16A4Skins", m16a4_skin_index, m16a4_skins, IM_ARRAYSIZE(m16a4_skins), Setting::Skins::M16A4::customID, sizeof(Setting::Skins::M16A4::customID));*/
                                        // Skins data for each SMG

                                        // Add rows for each SMG
                                    /*	add_row("UMP45", "##UMP45Skins", ump45_skin_index, ump45_skins, IM_ARRAYSIZE(ump45_skins), Setting::Skins::UMP::customID, sizeof(Setting::Skins::UMP::customID));
                                        add_row("UZI", "##UZISkins", uzi_skin_index, uzi_skins, IM_ARRAYSIZE(uzi_skins), Setting::Skins::UZI::customID, sizeof(Setting::Skins::UZI::customID));
                                        add_row("Thompson", "##ThompsonSkins", thompson_skin_index, thompson_skins, IM_ARRAYSIZE(thompson_skins), Setting::Skins::Thome::customID, sizeof(Setting::Skins::Thome::customID));
                                        add_row("Bizon", "##BizonSkins", bizon_skin_index, bizon_skins, IM_ARRAYSIZE(bizon_skins), Setting::Skins::Pithon::customID, sizeof(Setting::Skins::Pithon::customID));
                                        add_row("Vector", "##VectorSkins", vector_skin_index, vector_skins, IM_ARRAYSIZE(vector_skins), Setting::Skins::Vctor::customID, sizeof(Setting::Skins::Vctor::customID));*/
                                        // Skins data for each Sniper/DMR
                                    static const char* awm_skins[] = { "Normal AWM", "Mauve Avenger", "Field Commander", "Godzilla", "Rainbow Drake", "Flamewave" };
                                    static int awm_skin_index = 0;
                                    static char awm_custom_id[16] = "";

                                    static const char* m24_skins[] = { "Normal M24", "The Seven Seas", "Pharaoh's Might", "Lady Butterfly", "Circle of Life", "Cadence Maestro" };
                                    static int m24_skin_index = 0;
                                    static char m24_custom_id[16] = "";

                                    static const char* kar98k_skins[] = { "Normal Kar98K", "Terror Fang", "Kukulkan Fury", "Moonlit Grace", "Titanium Shark", "Nebula Hunter", "TViolet Volt" };
                                    static int kar98k_skin_index = 0;
                                    static char kar98k_custom_id[16] = "";

                                    static const char* amr_skins[] = { "Normal AMR", "Crimson Ephialtes" };
                                    static int amr_skin_index = 0;
                                    static char amr_custom_id[16] = "";

                                    static const char* sks_skins[] = { "Lady Carmine", "Metal Medley", "Snowcapped Berg" };
                                    static int sks_skin_index = 0;
                                    static char sks_custom_id[16] = "";

                                    static const char* slr_skins[] = { "Falling Blossom", "Mageblaze" };
                                    static int slr_skin_index = 0;
                                    static char slr_custom_id[16] = "";

                                    static const char* vss_skins[] = { "Crow" };
                                    static int vss_skin_index = 0;
                                    static char vss_custom_id[16] = "";

                                    static const char* mini14_skins[] = { "Icicle", "Ethereal Beauty", "Fortune Cat" };
                                    static int mini14_skin_index = 0;
                                    static char mini14_custom_id[16] = "";

                                    static const char* mk14_skins[] = { "Drakreign", "Gilded Galaxy" };
                                    static int mk14_skin_index = 0;
                                    static char mk14_custom_id[16] = "";

                                    static const char* mk12_skins[] = { "Precise Predator" };
                                    static int mk12_skin_index = 0;
                                    static char mk12_custom_id[16] = "";

                                    //// Add rows for each weapon
                                    //add_row("AWM", "##AWMSkins", awm_skin_index, awm_skins, IM_ARRAYSIZE(awm_skins), Setting::Skins::AWM::customID, sizeof(awm_custom_id));
                                    //add_row("M24", "##M24Skins", m24_skin_index, m24_skins, IM_ARRAYSIZE(m24_skins), Setting::Skins::M24::customID, sizeof(m24_custom_id));
                                    //add_row("Kar98K", "##Kar98KSkins", kar98k_skin_index, kar98k_skins, IM_ARRAYSIZE(kar98k_skins), Setting::Skins::kar::customID, sizeof(kar98k_custom_id));
                                    //add_row("AMR", "##AMRSkins", amr_skin_index, amr_skins, IM_ARRAYSIZE(amr_skins), Setting::Skins::AMR::customID, sizeof(amr_custom_id));
                                    //add_row("SKS", "##SKSSkins", sks_skin_index, sks_skins, IM_ARRAYSIZE(sks_skins), Setting::Skins::SKS::customID, sizeof(sks_custom_id));
                                    //add_row("SLR", "##SLRSkins", slr_skin_index, slr_skins, IM_ARRAYSIZE(slr_skins), Setting::Skins::SLR::customID, sizeof(slr_custom_id));
                                    //add_row("VSS", "##VSSSkins", vss_skin_index, vss_skins, IM_ARRAYSIZE(vss_skins), Setting::Skins::VSS::customID, sizeof(vss_custom_id));
                                    //add_row("Mini14", "##Mini14Skins", mini14_skin_index, mini14_skins, IM_ARRAYSIZE(mini14_skins), Setting::Skins::Mini14::customID, sizeof(mini14_custom_id));
                                    //add_row("Mk14", "##Mk14Skins", mk14_skin_index, mk14_skins, IM_ARRAYSIZE(mk14_skins), Setting::Skins::Mk14::customID, sizeof(mk14_custom_id));
                                    //add_row("Mk12", "##Mk12Skins", mk12_skin_index, mk12_skins, IM_ARRAYSIZE(mk12_skins), Setting::Skins::Mk12::customID, sizeof(mk12_custom_id));
                                    // MG3
                                    static const char* mg3_skins[] = { "Normal MG3", "Soaring Dragon" };
                                    static int mg3_skin_index = 0;
                                    static char mg3_custom_id[16] = "";

                                    // DP28
                                    static const char* dp28_skins[] = { "Normal DP28", "Enigmatic Hunter", "Gilded Jade Dragon", "Nautical Warrior", "Shenron" };
                                    static int dp28_skin_index = 0;
                                    static char dp28_custom_id[16] = "";

                                    // M249
                                    static const char* m249_skins[] = { "Normal M249", "Winter", "Party Parcel", "Moondrop Eterna", "Stargaze Fury" };
                                    static int m249_skin_index = 0;
                                    static char m249_custom_id[16] = "";

                                    //add_row("MG3", "##MG3Skins", mg3_skin_index, mg3_skins, IM_ARRAYSIZE(mg3_skins), Setting::Skins::MG3::customID, sizeof(mg3_custom_id));
                                    //add_row("DP28", "##DP28Skins", dp28_skin_index, dp28_skins, IM_ARRAYSIZE(dp28_skins), Setting::Skins::DP28::customID, sizeof(dp28_custom_id));
                                    //add_row("M249", "##M249Skins", m249_skin_index, m249_skins, IM_ARRAYSIZE(m249_skins), Setting::Skins::M249::customID, sizeof(m249_custom_id));

                                    ImGui::EndTable();
                                }






                            }
                            ImGui::EndChild();
                            ImGui::EndTabItem();
                        }
                        if (ImGui::BeginTabItem(ICON_FA_SMILE" Cloth skin")) {
                            ImGui::BeginChild("OutfitsChild", ImVec2(0, 0), true);
                            {
                                               RenderSkinSelector();

                            }
                            ImGui::EndChild();
                            ImGui::EndTabItem();
                        }

                        // Vehicles Tab
                        if (ImGui::BeginTabItem(ICON_FA_CAR" Vehicle skin")) {
                            ImGui::BeginChild("VehiclesChild", ImVec2(0, 0), true);
                            {
                                if (ImGui::BeginTable("VehicleSkinTable", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
                                    ImGui::TableSetupColumn("Category");
                                    ImGui::TableSetupColumn("Selection");
                                    ImGui::TableSetupColumn("Custom");
                                    ImGui::TableHeadersRow();

                                    auto add_vehicle_row = [](const char* category, const char* combo_label, int& selected_index, const char* options[], int options_count, char* custom_field, int custom_size) {
                                        ImGui::TableNextRow();
                                        ImGui::TableNextColumn();
                                        ImGui::TextUnformatted(category);
                                        ImGui::TableNextColumn();

                                        ImGui::SetNextItemWidth(200.0f);
                                        ImGui::Combo(combo_label, &selected_index, options, options_count);

                                        ImGui::TableNextColumn();

                                        std::string unique_label = "##Custom_" + std::string(category);
                                        ImGui::SetNextItemWidth(200.0f);
                                        ImGui::InputText(unique_label.c_str(), custom_field, custom_size);
                                        };
                                    auto add_row = [](const char* name, const char* combo_label, int& skin_index, const char* skins[], const int skin_ids[], int num_skins, char* custom_id, int id_size) {
                                        ImGui::TableNextRow();
                                        ImGui::TableNextColumn();
                                        ImGui::TextUnformatted(name);
                                        ImGui::TableNextColumn();

                                        // Set width for the combo box
                                        ImGui::SetNextItemWidth(150.0f);  // Adjust width as needed
                                        if (ImGui::Combo(combo_label, &skin_index, skins, num_skins)) {
                                            // Update the customID based on the selected skin
                                            int selected_skin_id = skin_ids[skin_index];
                                            snprintf(custom_id, id_size, "%d", selected_skin_id);  // Set the customID to the selected skin's ID
                                        }

                                        ImGui::TableNextColumn();

                                        // Unique label for each InputText to avoid ID conflicts
                                        std::string unique_label = "##Custom_" + std::string(name);
                                        ImGui::SetNextItemWidth(200.0f);  // Adjust width for the custom input box

                                        // InputText to allow manual input or overriding of the custom ID
                                        ImGui::InputText(unique_label.c_str(), custom_id, id_size);

                                        // If the user manually modifies the customID, it will override the combo box selection
                                        };
                                    // UAZ Skin Selection
                                    static const char* uaz_skins[] = {
                                        "Normal UAZ", "Lamborghini Urus", "Cute Kitten", "Godzilla UAZ",
                                        "Robust Wild", "Urus Pink", "Maserati Blu Emozione", "Maserati Arancione",
                                        "Maserati Urbano", "Maserati Firmamento", "Aston Martin", "Aston (Quasar Blue)",
                                        "Scarlet Sting", "Scarlet Sunburst", "Dodge Redline", "Dodge Sunburst", "Armed UAZ"
                                    };
                                    static int uaz_skin_index = 0;
                                    static char uaz_custom[32] = "";

                                    // Dacia Skin Selection
                                    static const char* dacia_skins[] = {
                                        "Normal Dacia", "Koenigsegg Gemera", "Lamborghini Estoque", "Tesla Roadster",
                                        "Pumpkin Dacia", "Soaring Eagle", "Speedy Reindeer", "Zombie Mess",
                                        "Dodge Charger", "Tuscan Torque", "Violet Venom", "Silver Gray",
                                        "Koenigsegg (Rainbow)", "Tesla Amethyst", "Tesla Digital Water",
                                        "Lamborghini Metal Grey", "Hellcat Tuscan Torque", "Violet",
                                        "Ghost Rosa", "Ghost Violet", "Ghost Gleam", "Midknight Dacia"
                                    };
                                    static int dacia_skin_index = 0;
                                    static char dacia_custom[32] = "";

                                    // Motorcycle Skin Selection
                                    static const char* moto_skins[] = {
                                        "Normal Moto", "DUCATI Panigale", "Black Phantom", "Crimson Storm",
                                        "Phantom Motorcycle", "Lovey Dovey", "Swift Mirage", "Roaring Tiger",
                                        "Skeleton Chariot"
                                    };
                                    static int moto_skin_index = 0;
                                    static char moto_custom[32] = "";

                                    // CoupeRB Skin Selection
                                    static const char* coupe_skins[] = {
                                        "Normal CoupeRP", "Lamborghini SVJ Blue", "Bugatti Nebula", "Warp Dawn",
                                        "Koenigsegg Dawn", "McLaren (Zenith Black)", "McLaren (Lunar White)",
                                        "Aston Martin", "Aston (Luminous Diamond)", "McLaren (Raspberry)",
                                        "McLaren Glory White", "McLaren (Royal Black)", "McLaren (Pearlescent)",
                                        "Koenigsegg (Silver Gray)", "Koenigsegg (Rainbow)", "Lamborghini Verde Alceo",
                                        "Lamborghini Galassia", "Lamborghini Centenario", "Koenigsegg Gilt",
                                        "Koenigsegg Cyber Nebula", "Koenigsegg Jade", "Koenigsegg Phoenix"
                                    };
                                    static int coupe_skin_index = 0;
                                    static char coupe_custom[32] = "";
                                    static int mirado_skin = 0;
                                    static int Buggy_skin = 0;
                                    static int BigFoot_skin = 0;

                                    add_row("Dacia", "##DaciaSkins", dacia_skin_index, Setting::Skins::Dacia::dacia_skins, Setting::Skins::Dacia::dacia_skin_ids, IM_ARRAYSIZE(Setting::Skins::Dacia::dacia_skins), Setting::Skins::Dacia::customID, sizeof(Setting::Skins::Dacia::customID));
                                    add_row("UAZ", "##UAZSkins", uaz_skin_index, Setting::Skins::UAZ::uaz_skins, Setting::Skins::UAZ::uaz_skin_ids, IM_ARRAYSIZE(Setting::Skins::UAZ::uaz_skins), Setting::Skins::UAZ::customID, sizeof(Setting::Skins::UAZ::customID));
                                    add_row("CoupeRP", "##CoupeRPSkins", coupe_skin_index, Setting::Skins::CoupeRP::couperp_skins, Setting::Skins::CoupeRP::couperp_skin_ids, IM_ARRAYSIZE(Setting::Skins::CoupeRP::couperp_skins), Setting::Skins::CoupeRP::customID, sizeof(Setting::Skins::CoupeRP::customID));
                                    add_row("Moto", "##MotoSkins", moto_skin_index, Setting::Skins::Moto::moto_skins, Setting::Skins::Moto::moto_skin_ids, IM_ARRAYSIZE(Setting::Skins::Moto::moto_skins), Setting::Skins::Moto::customID, sizeof(Setting::Skins::Moto::customID));
                                   add_row("Mirado", "##MiradoSkins", mirado_skin, Setting::Skins::Mirado::mirado_skins, Setting::Skins::Mirado::mirado_skin_ids, IM_ARRAYSIZE(Setting::Skins::Mirado::mirado_skins), Setting::Skins::Mirado::customID, sizeof(Setting::Skins::Mirado::customID));
                                   add_row("Buggy", "##BuggySkins", Buggy_skin, Setting::Skins::Buggy::Buggy_skins, Setting::Skins::Buggy::Buggy_skin_ids, IM_ARRAYSIZE(Setting::Skins::Buggy::Buggy_skins), Setting::Skins::Buggy::customID, sizeof(Setting::Skins::Buggy::customID));
                                   add_row("BigFoot", "##BigFootSkins", Buggy_skin, Setting::Skins::BigFoot::BigFoot_skins, Setting::Skins::BigFoot::BigFoot_skin_ids, IM_ARRAYSIZE(Setting::Skins::BigFoot::BigFoot_skins), Setting::Skins::BigFoot::customID, sizeof(Setting::Skins::BigFoot::customID));

                                    ImGui::EndTable();
                                }
                            }
                            ImGui::EndChild();
                            ImGui::EndTabItem();
                        }

                        if (ImGui::BeginTabItem(ICON_FA_SMILE " Emote")) {
                            ImGui::BeginChild("EmotesChild", ImVec2(0, 0), true);
                            {
                                if (ImGui::BeginTable("VehicleSkinTable", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
                                    ImGui::TableSetupColumn("Category");
                                    ImGui::TableSetupColumn("Selection");
                                    ImGui::TableSetupColumn("Custom");
                                    ImGui::TableHeadersRow();

                                    auto add_vehicle_row = [](const char* category, const char* combo_label, int& selected_index, const char* options[], int options_count, char* custom_field, int custom_size) {
                                        ImGui::TableNextRow();
                                        ImGui::TableNextColumn();
                                        ImGui::TextUnformatted(category);
                                        ImGui::TableNextColumn();

                                        ImGui::SetNextItemWidth(200.0f);
                                        ImGui::Combo(combo_label, &selected_index, options, options_count);

                                        ImGui::TableNextColumn();

                                        std::string unique_label = "##Custom_" + std::string(category);
                                        ImGui::SetNextItemWidth(200.0f);
                                        ImGui::InputText(unique_label.c_str(), custom_field, custom_size);
                                        };
                                    auto add_row = [](const char* name, const char* combo_label, int& skin_index, const char* skins[], const int skin_ids[], int num_skins, char* custom_id, int id_size) {
                                        ImGui::TableNextRow();
                                        ImGui::TableNextColumn();
                                        ImGui::TextUnformatted(name);
                                        ImGui::TableNextColumn();

                                        // Set width for the combo box
                                        ImGui::SetNextItemWidth(150.0f);  // Adjust width as needed
                                        if (ImGui::Combo(combo_label, &skin_index, skins, num_skins)) {
                                            // Update the customID based on the selected skin
                                            int selected_skin_id = skin_ids[skin_index];
                                            snprintf(custom_id, id_size, "%d", selected_skin_id);  // Set the customID to the selected skin's ID
                                        }

                                        ImGui::TableNextColumn();

                                        // Unique label for each InputText to avoid ID conflicts
                                        std::string unique_label = "##Custom_" + std::string(name);
                                        ImGui::SetNextItemWidth(200.0f);  // Adjust width for the custom input box

                                        // InputText to allow manual input or overriding of the custom ID
                                        ImGui::InputText(unique_label.c_str(), custom_id, id_size);

                                        // If the user manually modifies the customID, it will override the combo box selection
                                        };

                                    // Dacia Skin Selection
                                    static const char* dacia_skins[] = {
                                        "Normal Dacia", "Koenigsegg Gemera", "Lamborghini Estoque", "Tesla Roadster",
                                        "Pumpkin Dacia", "Soaring Eagle", "Speedy Reindeer", "Zombie Mess",
                                        "Dodge Charger", "Tuscan Torque", "Violet Venom", "Silver Gray",
                                        "Koenigsegg (Rainbow)", "Tesla Amethyst", "Tesla Digital Water",
                                        "Lamborghini Metal Grey", "Hellcat Tuscan Torque", "Violet",
                                        "Ghost Rosa", "Ghost Violet", "Ghost Gleam", "Midknight Dacia"
                                    };
                                    static int dacia_skin_index = 0;
                                    static int EmoteIndex1 = 0;
                                    static int EmoteIndex2 = 0;
                                    static int EmoteIndex3 = 0;
                                    static char dacia_custom[32] = "";


                                    add_row("Emote 1", "##ModEmote1", EmoteIndex1, Setting::Skins::sEmote1::emotes_names, Setting::Skins::sEmote1::emotes_ids, IM_ARRAYSIZE(Setting::Skins::sEmote1::emotes_names), Setting::Skins::sEmote1::customID, sizeof(Setting::Skins::sEmote1::customID));
                                    add_row("Emote 2", "##ModEmote2", EmoteIndex2, Setting::Skins::sEmote2::emotes_names2, Setting::Skins::sEmote2::emotes_ids, IM_ARRAYSIZE(Setting::Skins::sEmote2::emotes_names2), Setting::Skins::sEmote2::customID, sizeof(Setting::Skins::sEmote2::customID));
                                    add_row("Emote 3", "##ModEmote3", EmoteIndex3, Setting::Skins::sEmote3::emotes_names3, Setting::Skins::sEmote3::emotes_ids, IM_ARRAYSIZE(Setting::Skins::sEmote3::emotes_names3), Setting::Skins::sEmote3::customID, sizeof(Setting::Skins::sEmote3::customID));

                                    ImGui::EndTable();
                                }
                            }
                            ImGui::EndChild();
                            ImGui::EndTabItem();
                        }
                        RenderSkinSearch();
                        ImGui::EndTabBar();
                    }
                    //if (Setting::Memory::bModSkin) {
                    //    if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"mót sờ kin tét unicode") : (u8"Mod skin"))) {
                    //        ImGui::BeginTabBar("##SkinsTabs");



                    //        // Outfits Tab

                    //        if (ImGui::BeginTabItem("Gun skin")) {
                    //            ImGui::BeginChild("WeaponsChild", ImVec2(0, 0), true);
                    //            {
                    //                ImGui::Checkbox(" KillMessage", &Setting::KillMessage);
                    //                ImGui::Checkbox(" Deadbox", &Setting::ModDeadBox);
                    //              /*  ImGui::Checkbox(" Lobby Weapon", &Setting::Skins::LobbyWeapon::skin);
                    //                ImGui::Checkbox(" Lobby Clothes", &Setting::Skins::LobbySuit::skin);*/

                    //                // AR Section
                    //                if (ImGui::CollapsingHeader("Assault Rifles")) {
                    //                    ImGui::Columns(2);

                    //                    // Column 1
                    //                    ImGui::Text("M416");
                    //                    const char* m416_skins[] = { "Default M416", "Glacier", "The Fool", "Wanderer", "Lizard", "Wild", "TechnoCore", "Imperial", "Silver", "Tidal Embrace", "Shinobi Kami", "Diamond Mummy" };
                    //                    ImGui::Combo("##M416Skins", &Setting::Skins::m416::skin, m416_skins, IM_ARRAYSIZE(m416_skins));

                    //                    ImGui::Text("SCAR-L");
                    //                    const char* scarl_skins[] = { "Default SCAR-L", "Water", "Enchanted", "Operation", "Hextech", "Thorn", "Bloodstained", "Folly's" };
                    //                    ImGui::Combo("##SCARLSkins", &Setting::Skins::SCARL::skin, scarl_skins, IM_ARRAYSIZE(scarl_skins));

                    //                    ImGui::Text("AKM");
                    //                    const char* akm_skins[] = { "Default AKM", "Glacier", "Desert Fossil", "Jack-o", "Ghillie Dragon", "Gold Pirate", "Codebreaker", "Wandering Tyrant", "Starsea Admiral", "Bunny Munchkin", "Decisive" };
                    //                    ImGui::Combo("##AKMSkins", &Setting::Skins::AKM::skin, akm_skins, IM_ARRAYSIZE(akm_skins));

                    //                    ImGui::Text("M762");
                    //                    const char* m762_skins[] = { "Default M762", "Unicorn", "Concerto", "Deadly", "Stray Rebellion", "Starcore", "Messi", "Noctum Sunder" };
                    //                    ImGui::Combo("##M762Skins", &Setting::Skins::M762::skin, m762_skins, IM_ARRAYSIZE(m762_skins));

                    //                    ImGui::NextColumn();

                    //                    // Column 2
                    //                    ImGui::Text("ACE32");
                    //                    const char* ace32_skins[] = { "Default ACE32", "Beam Blast", "Icicle Spike - ACE32" };
                    //                    ImGui::Combo("##ACE32Skins", &Setting::Skins::ACE32::skin, ace32_skins, IM_ARRAYSIZE(ace32_skins));

                    //                    ImGui::Text("GROZA");
                    //                    const char* groza_skins[] = { "Default GROZA", "Forest", "Eventide", "Ryomen", "Splendid", "River", "Pumpkin" };
                    //                    ImGui::Combo("##GROZASkins", &Setting::Skins::GROZA::skin, groza_skins, IM_ARRAYSIZE(groza_skins));

                    //                    ImGui::Text("AUG");
                    //                    const char* aug_skins[] = { "Default AUG", "Wandering", "Evangelion", "Forsaken" };
                    //                    ImGui::Combo("##AUGSkins", &Setting::Skins::AUG::skin, aug_skins, IM_ARRAYSIZE(aug_skins));

                    //                    ImGui::Text("QBZ");
                    //                    const char* qbz_skins[] = { "Default QBZ", "Dazzling", "Fatal", "Nether" };
                    //                    ImGui::Combo("##QBZSkins", &Setting::Skins::QBZ::skin, qbz_skins, IM_ARRAYSIZE(qbz_skins));

                    //                    ImGui::Text("M16A4");
                    //                    const char* m16a4_skins[] = { "Default M16A4", "Blood", "Aurora", "Radiant", "Skeletal", "Dracoguard" };
                    //                    ImGui::Combo("##M16A4Skins", &Setting::Skins::M16A4::skin, m16a4_skins, IM_ARRAYSIZE(m16a4_skins));

                    //                    ImGui::Columns(1);
                    //                }

                    //                // SMG Section
                    //                if (ImGui::CollapsingHeader("SMGs")) {
                    //                    ImGui::Columns(2);

                    //                    // Column 1
                    //                    ImGui::Text("UMP45");
                    //                    const char* ump45_skins[] = { "Normal UMP45", "Dragonfire", "Outlawed", "8-Bit Blast", "Rainbow Stinger", "Marine Evolution", "Carnival Waves", "Cryofrost Shard" };
                    //                    ImGui::Combo("##UMP45Skins", &Setting::Skins::UMP::skin, ump45_skins, IM_ARRAYSIZE(ump45_skins));

                    //                    ImGui::Text("UZI");
                    //                    const char* uzi_skins[] = { "Normal UZI", "Savagery", "Ethereal Emblem", "Romantic Moments", "Shimmer Power", "Mystech", "Juicer" };
                    //                    ImGui::Combo("##UZISkins", &Setting::Skins::UZI::skin, uzi_skins, IM_ARRAYSIZE(uzi_skins));

                    //                    ImGui::NextColumn();

                    //                    // Column 2
                    //                    ImGui::Text("Thompson");
                    //                    const char* thompson_skins[] = { "Normal Thompson", "Candy Cane", "Steampunk" };
                    //                    ImGui::Combo("##ThompsonSkins", &Setting::Skins::Thome::skin, thompson_skins, IM_ARRAYSIZE(thompson_skins));

                    //                    ImGui::Text("Bizon");
                    //                    const char* bizon_skins[] = { "Normal Bizon", "Blazing Chameleon", "Skullcrusher", "Soldier Soul" };
                    //                    ImGui::Combo("##BizonSkins", &Setting::Skins::Pithon::skin, bizon_skins, IM_ARRAYSIZE(bizon_skins));

                    //                    ImGui::Text("Vector");
                    //                    const char* vector_skins[] = { "Normal Vector", "Blood Tooth", "Midnight Rose", "Gilded Reaper", "Mecha Drake" };
                    //                    ImGui::Combo("##VectorSkins", &Setting::Skins::Vctor::skin, vector_skins, IM_ARRAYSIZE(vector_skins));

                    //                    ImGui::Columns(1);
                    //                }

                    //                // Sniper Section
                    //                if (ImGui::CollapsingHeader("Snipers")) {
                    //                    ImGui::Columns(2);

                    //                    // Column 1
                    //                    ImGui::Text("AWM");
                    //                    const char* awm_skins[] = { "Normal AWM", "Mauve Avenger", "Field Commander", "Godzilla", "Rainbow Drake", "Flamewave" };
                    //                    ImGui::Combo("##AWMSkins", &Setting::Skins::AWM::skin, awm_skins, IM_ARRAYSIZE(awm_skins));

                    //                    ImGui::Text("M24");
                    //                    const char* m24_skins[] = { "Normal M24", "The Seven Seas", "Pharaoh's Might", "Lady Butterfly", "Circle of Life", "Cadence Maestro" };
                    //                    ImGui::Combo("##M24Skins", &Setting::Skins::M24::skin, m24_skins, IM_ARRAYSIZE(m24_skins));

                    //                    ImGui::Text("Kar98K");
                    //                    const char* kar98k_skins[] = { "Normal Kar98K", "Terror Fang", "Kukulkan Fury", "Moonlit Grace", "Titanium Shark", "Nebula Hunter", "TViolet Volt" };
                    //                    ImGui::Combo("##Kar98KSkins", &Setting::Skins::kar::skin, kar98k_skins, IM_ARRAYSIZE(kar98k_skins));

                    //                    ImGui::Text("AMR");
                    //                    const char* amr_skins[] = { "Normal AMR", "Crimson Ephialtes" };
                    //                    ImGui::Combo("##AMRSkins", &Setting::Skins::AMR::skin, amr_skins, IM_ARRAYSIZE(amr_skins));

                    //                    ImGui::NextColumn();

                    //                    // Column 2 (DMRs)
                    //                    ImGui::Text("SKS");
                    //                    const char* sks_skins[] = { "Lady Carmine", "Metal Medley", "Snowcapped Berg" };
                    //                    ImGui::Combo("##SKSSkins", &Setting::Skins::SKS::skin, sks_skins, IM_ARRAYSIZE(sks_skins));

                    //                    ImGui::Text("SLR");
                    //                    const char* slr_skins[] = { "Falling Blossom", "Mageblaze" };
                    //                    ImGui::Combo("##SLRSkins", &Setting::Skins::SLR::skin, slr_skins, IM_ARRAYSIZE(slr_skins));

                    //                    ImGui::Text("VSS");
                    //                    const char* vss_skins[] = { "Crow" };
                    //                    ImGui::Combo("##VSSSkins", &Setting::Skins::VSS::skin, vss_skins, IM_ARRAYSIZE(vss_skins));

                    //                    ImGui::Text("Mini14");
                    //                    const char* mini14_skins[] = { "Icicle", "Ethereal Beauty", "Fortune Cat" };
                    //                    ImGui::Combo("##Mini14Skins", &Setting::Skins::Mini14::skin, mini14_skins, IM_ARRAYSIZE(mini14_skins));

                    //                    ImGui::Text("Mk14");
                    //                    const char* mk14_skins[] = { "Drakreign", "Gilded Galaxy" };
                    //                    ImGui::Combo("##Mk14Skins", &Setting::Skins::Mk14::skin, mk14_skins, IM_ARRAYSIZE(mk14_skins));

                    //                    ImGui::Text("Mk12");
                    //                    const char* mk12_skins[] = { "Precise Predator" };
                    //                    ImGui::Combo("##Mk12Skins", &Setting::Skins::Mk12::skin, mk12_skins, IM_ARRAYSIZE(mk12_skins));

                    //                    ImGui::Columns(1);
                    //                }

                    //                // LMG Section
                    //                if (ImGui::CollapsingHeader("Light Machine Guns")) {
                    //                    ImGui::Columns(2);

                    //                    // Column 1
                    //                    ImGui::Text("MG3");
                    //                    const char* mg3_skins[] = { "Normal MG3", "Soaring Dragon" };
                    //                    ImGui::Combo("##MG3Skins", &Setting::Skins::MG3::skin, mg3_skins, IM_ARRAYSIZE(mg3_skins));

                    //                    ImGui::Text("DP28");
                    //                    const char* dp28_skins[] = { "Normal DP28", "Enigmatic Hunter", "Gilded Jade Dragon", "Nautical Warrior", "Shenron" };
                    //                    ImGui::Combo("##DP28Skins", &Setting::Skins::DP28::skin, dp28_skins, IM_ARRAYSIZE(dp28_skins));

                    //                    ImGui::NextColumn();

                    //                    // Column 2
                    //                    ImGui::Text("M249");
                    //                    const char* m249_skins[] = { "Normal M249", "Winter", "Party Parcel", "Moondrop Eterna", "Stargaze Fury" };
                    //                    ImGui::Combo("##M249Skins", &Setting::Skins::M249::skin, m249_skins, IM_ARRAYSIZE(m249_skins));

                    //                    ImGui::Columns(1);
                    //                }

                    //                // Shotguns & Others Section
                    //                if (ImGui::CollapsingHeader("Shotguns & Other Weapons")) {
                    //                    ImGui::Columns(2);

                    //                    // Column 1
                    //                    ImGui::Text("DBS");
                    //                    const char* dbs_skins[] = { "Normal DBS", "Panthera Prime" };
                    //                    ImGui::Combo("##DBSSkins", &Setting::Skins::Shotgun::skin, dbs_skins, IM_ARRAYSIZE(dbs_skins));

                    //                    ImGui::Text("Skorpion");
                    //                    const char* skorpion_skins[] = { "Normal Skorpion", "Golden Cipher" };
                    //                    ImGui::Combo("##SkorpionSkins", &Setting::Skins::Skorpion::skin, skorpion_skins, IM_ARRAYSIZE(skorpion_skins));

                    //                    ImGui::NextColumn();

                    //                    // Column 2
                    //                    ImGui::Text("Pan");
                    //                    const char* pan_skins[] = { "Normal Pan", "Honeypot", "Night of Rock", "Crocodile", "Accolade", "Break Pad", "Chicken Hot", "Faerie Luster", "Anniversary", "Olive Branch" };
                    //                    ImGui::Combo("##PanSkins", &Setting::Skins::Pan::skin, pan_skins, IM_ARRAYSIZE(pan_skins));

                    //                    ImGui::Columns(1);
                    //                }
                    //            }
                    //            ImGui::EndChild();
                    //            ImGui::EndTabItem();
                    //        }
                    //        if (ImGui::BeginTabItem("Cloth skin")) {
                    //            ImGui::BeginChild("OutfitsChild", ImVec2(0, 0), true);
                    //            {
                    //                // Suits
                    //                RenderSkinSelector();

                    //                //// Helmets
                    //                //ImGui::Text("Helmet Selection");
                    //                //const char* helmet_options[] = {
                    //                //    "Normal Helmet", "Inferno", "Masked", "Ignis", "Godzilla", "Glacier", "Mutated", "Cupid",
                    //                //    "Crimson", "Angry", "Supernova", "Dazzling"
                    //                //};
                    //                //ImGui::Combo("##HelmetSelection", &Setting::helmet::helmets3, helmet_options, IM_ARRAYSIZE(helmet_options));

                    //                //// Backpack
                    //                //ImGui::Text("Backpack Selection");
                    //                //const char* backpack_options[] = {
                    //                //    "Normal Backpack", "Pharaoh", "Blood Raven", "BAPE X", "Bling", "Origin Lumen", "The Fool",
                    //                //    "Butterfly", "Draconian", "Illusion", "Ignis", "Brilliant", "Snowy Seal", "Godzilla",
                    //                //    "Chicken Delight", "Angel Wings", "Blood Rain", "Jinx"
                    //                //};
                    //                //ImGui::Combo("##BackpackSelection", &Setting::Backpack::Backpack3, backpack_options, IM_ARRAYSIZE(backpack_options));
                    //            }
                    //            ImGui::EndChild();
                    //            ImGui::EndTabItem();
                    //        }
                    //        // Vehicles Tab
                    //        if (ImGui::BeginTabItem("Vehicle skin")) {
                    //            ImGui::BeginChild("VehiclesChild", ImVec2(0, 0), true);
                    //            {
                    //                ImGui::Columns(2);

                    //                // UAZ
                    //                ImGui::Text("UAZ");
                    //                const char* uaz_skins[] = {
                    //                    "Normal UAZ", "Lamborghini Urus", "Cute Kitten", "Godzilla UAZ",
                    //                    "Robust Wild", "Urus Pink", "Maserati Blu Emozione", "Maserati Arancione",
                    //                    "Maserati Urbano", "Maserati Firmamento", "Aston Martin", "Aston (Quasar Blue)",
                    //                    "Scarlet Sting", "Scarlet Sunburst", "Dodge Redline", "Dodge Sunburst", "Armed UAZ"
                    //                };
                    //                ImGui::Combo("##UAZSkins", &Setting::Skins::UAZ::skin, uaz_skins, IM_ARRAYSIZE(uaz_skins));

                    //                // Dacia
                    //                ImGui::Text("Dacia");
                    //                const char* dacia_skins[] = {
                    //                    "Normal Dacia", "Koenigsegg Gemera", "Lamborghini Estoque", "Tesla Roadster",
                    //                    "Pumpkin Dacia", "Soaring Eagle", "Speedy Reindeer", "Zombie Mess",
                    //                    "Dodge Charger", "Tuscan Torque", "Violet Venom", "Silver Gray",
                    //                    "Koenigsegg (Rainbow)", "Tesla Amethyst", "Tesla Digital Water",
                    //                    "Lamborghini Metal Grey", "Hellcat Tuscan Torque", "Violet",
                    //                    "Ghost Rosa", "Ghost Violet", "Ghost Gleam", "Midknight Dacia"
                    //                };
                    //                ImGui::Combo("##DaciaSkins", &Setting::Skins::Dacia::skin, dacia_skins, IM_ARRAYSIZE(dacia_skins));

                    //                ImGui::NextColumn();

                    //                // Motorcycle
                    //                ImGui::Text("Motorcycle");
                    //                const char* moto_skins[] = {
                    //                    "Normal Moto", "DUCATI Panigale", "Black Phantom", "Crimson Storm",
                    //                    "Phantom Motorcycle", "Lovey Dovey", "Swift Mirage", "Roaring Tiger",
                    //                    "Skeleton Chariot"
                    //                };
                    //                ImGui::Combo("##MotoSkins", &Setting::Skins::Moto::skin, moto_skins, IM_ARRAYSIZE(moto_skins));

                    //                // CoupeRB
                    //                ImGui::Text("CoupeRB");
                    //                const char* coupe_skins[] = {
                    //                    "Normal CoupeRP", "Lamborghini SVJ Blue", "Bugatti Nebula", "Warp Dawn",
                    //                    "Koenigsegg Dawn", "McLaren (Zenith Black)", "McLaren (Lunar White)",
                    //                    "Aston Martin", "Aston (Luminous Diamond)", "McLaren (Raspberry)",
                    //                    "McLaren Glory White", "McLaren (Royal Black)", "McLaren (Pearlescent)",
                    //                    "Koenigsegg (Silver Gray)", "Koenigsegg (Rainbow)", "Lamborghini Verde Alceo",
                    //                    "Lamborghini Galassia", "Lamborghini Centenario", "Koenigsegg Gilt",
                    //                    "Koenigsegg Cyber Nebula", "Koenigsegg Jade", "Koenigsegg Phoenix"
                    //                };
                    //                ImGui::Combo("##CoupeSkins", &Setting::Skins::CoupeRP::skin, coupe_skins, IM_ARRAYSIZE(coupe_skins));

                    //                ImGui::Columns(1);
                    //            }
                    //            ImGui::EndChild();
                    //            ImGui::EndTabItem();
                    //        }
                    //        if (ImGui::BeginTabItem("Emote")) {
                    //            ImGui::BeginChild("EmotesChild", ImVec2(0, 0), true);
                    //            {
                    //                string text = (Setting::LanguageVNM == true) ? (u8"** ĐANG CẬP NHẬT **") : (u8"** UPDATING **");
                    //                ImGui::SetCursorPosX((ImGui::GetWindowWidth() - ImGui::CalcTextSize(text.c_str()).x) / 2.f);
                    //                ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), text.c_str());
                    //            }
                    //            ImGui::EndChild();
                    //            ImGui::EndTabItem();
                    //        }
                    //        RenderSkinSearch();
                    //        ImGui::EndTabBar();
                    //    }
                    //}

                    if (Setting::Memory::JumpProne) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Macro nhảy nằm") : (u8"Macro jump & prone"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt nhảy: ") : (u8"Key active jump: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::JumpKey, ImVec2(0, 0), "JumpKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt nằm: ") : (u8"Key active prone: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::ProneKey, ImVec2(0, 0), "ProneKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím kích hoạt macro nhảy nằm: ") : (u8"Key active macro jump & prone: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::JumpProneKey, ImVec2(0, 0), "JumpProneKey");
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Cài đặt nút nhảy và ngồi của bạn tại đây ") : (u8"Bind your key jump and prone here"));
                        }
                    }
                    if (Setting::Memory::LessRecoil) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Giảm giật") : (u8"Less recoil"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Vui lòng bật chống check memory để tính năng hoạt động") : (u8"Please enable anti memory checker to less recoil work"));
                            ImGui::SameLine();
                            HelpMarker((Setting::LanguageVNM == true) ? (u8"Để giảm thiểu tỉ lệ ban") : (u8"To decrease ban chance"));
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Loại giảm giật") : (u8"Type lessrecoil"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            {
                                const char* TextToChose[] = { (Setting::LanguageVNM == true) ? (u8"Giảm giật 70%") : ("Less recoil 70%"), (Setting::LanguageVNM == true) ? (u8"Giảm giật 90%") : ("Less recoil 90%") };
                                const char* Combo_Show = TextToChose[Setting::Memory::LessRecoilType];
                                if (ImGui::BeginCombo("###Type_LessRecoil", Combo_Show, ImGuiComboFlags_HeightSmall)) {
                                    for (int n = 0; n < IM_ARRAYSIZE(TextToChose); n++) {
                                        const bool is_selected = (Setting::Memory::LessRecoilType == n);
                                        if (ImGui::Selectable(TextToChose[n], is_selected))
                                            Setting::Memory::LessRecoilType = n;
                                        if (is_selected)
                                            ImGui::SetItemDefaultFocus();
                                    }
                                    ImGui::EndCombo();
                                }
                            }
                            ImGui::PopItemWidth();
                        }
                    }
                    if (Setting::Memory::CameraSpin) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Xoay camera") : (u8"Camera spin"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Đây là chức năng xoay camera ( kẻ địch sẽ thấy )") : (u8"That features make your camera been moved ( enemy will see it )"));
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Góc độ ngửa mặt: ") : (u8"Pitch ratio: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###CameraSpinPitch", &Setting::Memory::CameraSpinPitch, -90, 90, (Setting::LanguageVNM == true) ? (u8"%d") : (u8"%d"));
                            ImGui::PopItemWidth();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Tốc độ xoay: ") : (u8"Speed of move: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###CameraSpinYaw", &Setting::Memory::CameraSpinYaw, 0, 180, (Setting::LanguageVNM == true) ? (u8"%d") : (u8"%d"));
                            ImGui::PopItemWidth();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím xoay: ") : (u8"Key move: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::CameraSpinKey);
                        }
                    }
                    if (Setting::Memory::AutoReport) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Tự động report") : (u8"Auto report"))) {
                            /*
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Số lượng chạy: ") : (u8"Number of missions: "));
                            ImGui::SameLine( );
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###CountReportValue", &Setting::Memory::CountReport, 0, 30, (Setting::LanguageVNM == true) ? (u8"%d nhiệm vụ") : (u8"%d misions"));
                            ImGui::PopItemWidth( );
                            */
                            if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Thực hiện") : (u8"Start process"))) {
                                HANDLE hHandle = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)AutoMissionns, 0, 0, 0);
                                CloseHandle(hHandle);
                                Data::HandleList.push_back(hHandle);
                            }
                            ImGui::SameLine();
                            ImGui::Text(MissionStatus.c_str());
                            /*ImGui::Text("Credit : nthuy2004");*/
                        }
                    }
                    if (Setting::Memory::bBigWeapon) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Súng to") : (u8"Big weapon"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Tỉ lệ tăng: ") : (u8"Value increase"));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###BigWeaponValue", &Setting::Memory::BigWeaponValue, 0, 25);
                            ImGui::PopItemWidth();
                        }
                    }
                    if (Setting::Memory::SpinBot) {
                        if (ImGui::CollapsingHeader((Setting::LanguageVNM == true) ? (u8"Spin bot") : (u8"Spin bot"))) {
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Tốc độ xoay: ") : (u8"Speed of move: "));
                            ImGui::SameLine();
                            ImGui::PushItemWidth(-1);
                            ImGui::SliderInt("###SpinBotValue", &Setting::Memory::SpinBotSpeed, 0, 360);
                            ImGui::PopItemWidth();
                            ImGui::Text((Setting::LanguageVNM == true) ? (u8"Phím xoay: ") : (u8"Key move: "));
                            ImGui::SameLine();
                            BindKey(&Setting::Memory::SpinBotKey);
                        }
                    }
                }
                ImGui::EndChild();
            }
            ImGui::EndChild();
        }
    }
    if (IndexTabs == SETTINGINDEX) {
        ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 8);
        ImGui::BeginChild("###Main_Child", ImVec2(0, 0), true);
        {
            ImGui::PopStyleVar();
            ImGui::BeginChild("###Left_Child", ImVec2(ImGui::GetWindowSize().x / 2, ImGui::GetWindowSize().y / 4.5), true);
            {
                ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Kẻ viền chữ  |  Update tick:") : (u8"Border string  |  Update tick:"), &Setting::BorderString);
                ImGui::SameLine();
                ImGui::PushItemWidth(-1);
                ImGui::SliderInt("###Updatetick", &Setting::UpdateTick, 10, 100, "%dms");
                ImGui::PopItemWidth();
                ImGui::Separator();
                ImGui::Checkbox("Enable name cache", &Fake_Namecache);
                ImGui::SameLine();
                if (ImGui::Button("Flush name cache", ImVec2(-1, 0))) {
                    Data::NamedCacheList.clear();
                    ImGui::InsertNotification({ ImGuiToastType_Success, 2500, (Setting::LanguageVNM == 1) ? u8"Đã reload name cache" : "Reloaded name cache" });
                }
                ImGui::Separator();
                if (ImGui::Button("Save menu", ImVec2(ImGui::GetWindowSize().x / 2 - 15, 0))) {

                    remove("HELIOS_cfg.dat");
                    remove("Heliosconfig.ini");
                    if (SaveConfig("Heliosconfig.ini")) {
                        ImGui::InsertNotification({ ImGuiToastType_Success, 2500, (Setting::LanguageVNM == 1) ? u8"Lưu Internal Config thành công" : "Save Internal Config succeeded" });
                    }
                    else {
                        ImGui::InsertNotification({ ImGuiToastType_Error, 2500, (Setting::LanguageVNM == 1) ? u8"Lỗi khi lưu Internal Config" : "Error saving Internal Config" });
                    }
                    config::SaveConfig("helios_cfg");
                    config::SaveModSkin();
                    config::SaveEffect();
                    Teammate::SaveTeammate(Teammate::TeammateList, "helios_teammate.cfg");
                    ImGui::InsertNotification({ ImGuiToastType_Success, 2500, (Setting::LanguageVNM == 1) ? u8"Lưu menu thành công" : "Save menu successed" });
                }
                ImGui::SameLine();
                if (ImGui::Button("Load menu", ImVec2(-1, 0))) {
                    config::LoadConfig("helios_cfg");
                    std::ifstream infile("helios_skin_new_fixed.cfg");
                    if (infile.good()) {
                        config::LoadModSkin();
                    }
                    infile.close();
                    std::ifstream infileA("helios_skin_effect.cfg");
                    if (infileA.good()) {
                        config::LoadEffect();
                    }
                    infileA.close();
                    std::ifstream infileini("Heliosconfig.ini");
                    if (infileini.good()) {
                        if (LoadConfig("Heliosconfig.ini")) {
                            ImGui::InsertNotification({ ImGuiToastType_Success, 2500, (Setting::LanguageVNM == 1) ? u8"Loaded Skin And Internal Config" : "Loaded Skin And Internal Config" });
                        }
                        else {
                            ImGui::InsertNotification({ ImGuiToastType_Error, 2500, (Setting::LanguageVNM == 1) ? u8"Error Loading Internal Config" : "Error Loading Internal Config" });
                        }
                    }
                    infileini.close();
                    Teammate::TeammateList = Teammate::LoadTeammate("helios_teammate.cfg");
                    ImGui::InsertNotification({ ImGuiToastType_Success, 2500, (Setting::LanguageVNM == 1) ? u8"Loaded menu thành công" : "Loaded menu successfully" });
                }
                ImGui::Separator();
                // In the UI part of the code
                std::istringstream iss(Data::UserTime);
                int totalMinutes = 0;
                iss >> totalMinutes;

                int hoursLeft = totalMinutes / 60;
                int minutesLeft = totalMinutes % 60;

                string TimeExpiredWrite;
                if (Data::IsFreeUser == -1 || Data::IsFreeUser == 0) {
                    if (Setting::LanguageVNM == true) {
                        TimeExpiredWrite = u8"Hết hạn sau ";
                        TimeExpiredWrite.append(std::to_string(hoursLeft));
                        TimeExpiredWrite.append(u8" giờ ");
                        TimeExpiredWrite.append(std::to_string(minutesLeft));
                        TimeExpiredWrite.append(u8" phút");
                    }
                    else {
                        TimeExpiredWrite = u8"Expires after ";
                        TimeExpiredWrite.append(std::to_string(hoursLeft));
                        TimeExpiredWrite.append(u8" hours ");
                        TimeExpiredWrite.append(std::to_string(minutesLeft));
                        TimeExpiredWrite.append(u8" minutes");
                    }
                }
                else {
                    TimeExpiredWrite = (Setting::LanguageVNM == true) ? (u8"Bạn đang sử dụng phiên bản miễn phí!") : ("You are using free version!");
                }
                ImGui::Text(TimeExpiredWrite.c_str());
                ImGui::SameLine();
                ImGui::EndChild();
            }
            ImGui::SameLine();
            ImGui::BeginChild("###Right_Child", ImVec2(-1, ImGui::GetWindowSize().y / 4.5), true);
            {
                if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Thoát hack") : (u8"Unload hack"), ImVec2(-1, -1))) {
                    IsExitHack = true;
                }
    /*            if (Data::LocalScoping) {
                    ImGui::Text("IsScoping");

                }
                else {
                    ImGui::Text("IsNotScoping");

                }*/

                /* ImGui::Text("-----Statistics-----");
                 ImGui::Text(("Enemy: " + std::to_string(Data::AActorList.size( ))).c_str( ));
                 ImGui::Text(("Vehicle: " + std::to_string(Data::VehicleList.size( ))).c_str( ));
                 ImGui::Text(("Items: " + std::to_string(Data::ItemList.size( ))).c_str( ));
                 ImGui::Text(("Cached names: " + std::to_string(Data::NamedCacheList.size( ))).c_str( ));*/
                ImGui::EndChild();
            }
            if (Data::IsFreeUser == -1 || Data::IsFreeUser == 0) {
                DrawTextCentered("Special features");
                ImGui::BeginChild("###Special features", ImVec2(0, 0), true);
                {

                //    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Danger mode") : (u8"Danger mode"), &Setting::SpecialFeatures::DangerMode);
                  //  ImGui::Text("Local Bag Level: %d", Data::LocalBagLevel);
                    ImGui::SameLine();
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện súng AR gần nhất") : (u8"Show weapon AR nearest"), &Setting::SpecialFeatures::ArNearest);
                    ImGui::SameLine();
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Game information") : (u8"Game information"), &Setting::SpecialFeatures::GameInformation);
                    /*ImGui::SameLine( );*/
                    /*ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Hiện súng AR gần nhất") : (u8"Show weapon AR nearest"), &Setting::SpecialFeatures::ArNearest);*/

                    ImGui::SameLine( );
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Chế độ nhà phát triển") : (u8"Developer mode"), &Setting::SpecialFeatures::DevMode);
                    ImGui::SameLine();
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tự động bắn") : (u8"Auto fire"), &Setting::SpecialFeatures::AutoFire);
                    ImGui::SameLine();
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"ESP Preview") : (u8"ESP Preview"), & Setting::Predict);
                    if (Setting::EspPreview) {
                        DrawPreviewESP();
                    }
                    ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"Tự động post ảnh win") : (u8"Auto post WWCD win"),&Setting::SpecialFeatures::WWCDPost);
   /*                 ImGui::Text("Game FPS:");
                    ImGui::SameLine();
                    ImGui::PushItemWidth(659);
                    if (ImGui::SliderInt("###FPS", &Setting::GameFPS, 60, 999, "%.0f fps"))
                    {
                        Utility::WriteMemoryEx<int>(Data::GameState + Offset::CurrentMaxFPS, Setting::GameFPS);
                    }*/
                    /*ImGui::SameLine( );*/
                    /*ImGui::Checkbox((Setting::LanguageVNM == true) ? (u8"English") : (u8"Tiếng việt"), &Setting::LanguageVNM);*/
                    ImGui::Text("FOV: ");
                    ImGui::SameLine();
                    const float CheckBoxWidth = (ImGui::GetContentRegionAvail().x - (2 - 1) * ImGui::GetStyle().ItemSpacing.x) / 2;
                    ImGui::SetNextItemWidth(CheckBoxWidth);
                    ImGui::SliderFloat("###ThirdPersonFOV", &Setting::SpecialFeatures::ThirdPersonFOV, 0.5, 10, "%.1fx");
                    ImGui::SameLine();
                    ImGui::SetNextItemWidth(CheckBoxWidth);
                    ImGui::SliderFloat("###ScopeFOV", &Setting::SpecialFeatures::ScopeFOV, 1, 6, "Scope : %.1fx");
                    ImGui::Text("FOV2: ");
                    ImGui::SameLine();
                    ImGui::PushItemWidth(-1);
                    ImGui::SliderInt("###FieldOfView", &Setting::SpecialFeatures::FieldOfView, 220, 100000);
                    ImGui::PopItemWidth();
                
                    //if (Setting::OTHER) {
                    //    ImGui::Text("Version: GL/KR/TW");

                    //}
                    //else {
                    //    ImGui::Text("Version: VNG");

                    //}



                    //static int counter = 0;
                    //if (ImGui::Button("AUTO BAN")) // Buttons return true when clicked (most widgets return true when edited/activated)
                    //    counter++;
                    //ImGui::SameLine( );
                    //ImGui::Text(u8"<-- Vui lòng không ấn nút này nếu bạn không muốn mất acc.");

                   /* ImGui::SliderFloat("###Test1", &Cheat::Test1, -1000, 1000);
                    ImGui::SliderFloat("###Test2", &Cheat::Test2, -1000, 1000);

                    ImGui::SliderFloat("###Test3", &Cheat::Test3, -1000, 1000);*/

                    ImGui::EndChild();
                }
            }
            if (IsExitHack) {
                ImGui::SetNextWindowSize(ImVec2(300, 85));
                if (IsExitHackCenter == false) {
                    ImGui::SetNextWindowPos(ImVec2((ScreenInfo::Width - 300) / 2, (ScreenInfo::Height - 100) / 2));
                    IsExitHackCenter = true;
                }
                ImGui::PushStyleVar(ImGuiStyleVar_WindowTitleAlign, ImVec2(0.5f, 0.5f));
                ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 8);
                ImGui::Begin((Setting::LanguageVNM == true) ? (u8"Thoát hack") : (u8"Exit hack"), 0, Flags);
                ImGui::Text((Setting::LanguageVNM == true) ? (u8"Bạn chắc chứ?") : (u8"Are you sure?"));
                if (ImGui::Button("OK", ImVec2(ImGui::GetWindowSize().x / 2 - 15, 0))) {
                    AimForm::RestoreHook();
                    H::bShuttingDown = true;
                    //::ShowWindow(GetConsoleWindow( ), SW_HIDE);
                    CloseHandle(CreateThread(0, 0, (LPTHREAD_START_ROUTINE)ExitLibrary, 0, 0, 0));
                }
                ImGui::SameLine();
                if (ImGui::Button((Setting::LanguageVNM == true) ? (u8"Hủy bỏ") : (u8"Cancel"), ImVec2(-1, 0))) {
                    IsExitHack = false;
                    IsExitHackCenter = false;
                }
                ImGui::PopStyleVar(2);
                ImGui::End();
            }
            ImGui::EndChild();
        }
    }
    ImGui::End();
}
Translate everything and add all what we said make sure to give full code with full tabs and full translations to everything make sure all Childs and tabs will show add all languages we mentioned GIVE FULL CODE
